
CollendaProgram.elf:     file format elf32-littlenios2
CollendaProgram.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008020

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x000002b8 memsz 0x000002b8 flags r-x
    LOAD off    0x000012d8 vaddr 0x000082d8 paddr 0x000082dc align 2**12
         filesz 0x00000004 memsz 0x00000004 flags rw-
    LOAD off    0x000012e0 vaddr 0x000082e0 paddr 0x000082e0 align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00008020  00008020  000012dc  2**0
                  CONTENTS
  2 .text         000002b8  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000000  000082d8  000082e0  000012dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .rwdata       00000004  000082d8  000082dc  000012d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000000c  000082e0  000082e0  000012e0  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  000082ec  000082ec  000012dc  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000012dc  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000108  00000000  00000000  00001300  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00000843  00000000  00000000  00001408  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000414  00000000  00000000  00001c4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00000480  00000000  00000000  0000205f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000128  00000000  00000000  000024e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000487  00000000  00000000  00002608  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000101  00000000  00000000  00002a8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00002b90  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000078  00000000  00000000  00002ba0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000396a  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0000396d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00003979  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000397a  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0000397b  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0000397f  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00003983  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  00003987  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  00003992  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  0000399d  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  000039a8  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000023  00000000  00000000  000039b3  2**0
                  CONTENTS, READONLY
 29 .jdi          000053ff  00000000  00000000  000039d6  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0004c32b  00000000  00000000  00008dd5  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
00008020 l    d  .text	00000000 .text
000082d8 l    d  .rodata	00000000 .rodata
000082d8 l    d  .rwdata	00000000 .rwdata
000082e0 l    d  .bss	00000000 .bss
000082ec l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../CollendaProgram_bsp//obj/HAL/src/crt0.o
00008058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00008278 g     F .text	0000002c alt_main
000082dc g       *ABS*	00000000 __flash_rwdata_start
000082d0 g     F .text	00000008 altera_nios2_gen2_irq_init
00008000 g     F .entry	0000000c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
000082e4 g     O .bss	00000004 alt_argv
000102d8 g       *ABS*	00000000 _gp
00008000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
000082ec g       *ABS*	00000000 __bss_end
000082c8 g     F .text	00000004 alt_dcache_flush_all
000082dc g       *ABS*	00000000 __ram_rwdata_end
000082d8 g       *ABS*	00000000 __ram_rodata_end
000082d8 g     O .rwdata	00000004 jtag_uart_0
000082ec g       *ABS*	00000000 end
0000f530 g       *ABS*	00000000 __alt_stack_pointer
00008020 g     F .text	0000003c _start
000082c4 g     F .text	00000004 alt_sys_init
000082d8 g       *ABS*	00000000 __ram_rwdata_start
000082d8 g       *ABS*	00000000 __ram_rodata_start
000082ec g       *ABS*	00000000 __alt_stack_base
000082e0 g       *ABS*	00000000 __bss_start
0000805c g     F .text	0000013c main
000082e0 g     O .bss	00000004 alt_envp
000082d8 g       *ABS*	00000000 __flash_rodata_start
000082a4 g     F .text	00000020 alt_irq_init
000082e8 g     O .bss	00000004 alt_argc
00008020 g       *ABS*	00000000 __ram_exceptions_start
000082dc g       *ABS*	00000000 _edata
000082ec g       *ABS*	00000000 _end
00008020 g       *ABS*	00000000 __ram_exceptions_end
0000f530 g       *ABS*	00000000 __alt_data_end
0000800c g       .entry	00000000 _exit
000082cc g     F .text	00000004 alt_icache_flush_all
00008198 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08600814 	ori	at,at,32800
    jmp r1
    8008:	0800683a 	jmp	at

0000800c <_exit>:
	...

Disassembly of section .text:

00008020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    8024:	defd4c14 	ori	sp,sp,62768
    movhi gp, %hi(_gp)
    8028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    802c:	d680b614 	ori	gp,gp,728
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8034:	10a0b814 	ori	r2,r2,33504

    movhi r3, %hi(__bss_end)
    8038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    803c:	18e0bb14 	ori	r3,r3,33516

    beq r2, r3, 1f
    8040:	10c00326 	beq	r2,r3,8050 <_start+0x30>

0:
    stw zero, (r2)
    8044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    804c:	10fffd36 	bltu	r2,r3,8044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8050:	00081980 	call	8198 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8054:	00082780 	call	8278 <alt_main>

00008058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8058:	003fff06 	br	8058 <alt_after_alt_main>

0000805c <main>:
#define MASK_Y 0b00000000000000000000011000000000
#define DATA_B_BASE 0x11050
#define DATA_A_BASE 0x11060
#define PRINTTING_BASE 0x11040

int main(){
    805c:	deffff04 	addi	sp,sp,-4
	//y = 300
	unsigned long dataB_sp_4 = 0b01100001000100100101100000000000;
	unsigned long dataA_sp_4 = 0b00000000000001000000000010000000;

	//y = 400
	unsigned long dataB_sp_5 = 0b01100001000100110010000000000000;
    8060:	00d844f4 	movhi	r3,24851
	//y = 50
	unsigned long dataB_sp_1 = 0b01100001000100000110010000000000;
	unsigned long dataA_sp_1 = 0b00000000000001000000000001010000;

	//y = 100
	unsigned long dataB_sp_2 = 0b01100001000100001100100000000000;
    8064:	01184474 	movhi	r4,24849
#define DATA_A_BASE 0x11060
#define PRINTTING_BASE 0x11040

int main(){
	//y = 50
	unsigned long dataB_sp_1 = 0b01100001000100000110010000000000;
    8068:	01584434 	movhi	r5,24848
	int counter = 0;
	bool refreshed = false;

	while(counter < 280)
	{
		if(IORD(PRINTTING_BASE,0) == 0)
    806c:	03000074 	movhi	r12,1
		{
			if(refreshed == false)
			{
				IOWR_ALTERA_AVALON_PIO_DATA(DATA_A_BASE, dataA_sp_1);
    8070:	03400134 	movhi	r13,4
    8074:	01c00074 	movhi	r7,1
				IOWR_ALTERA_AVALON_PIO_DATA(DATA_B_BASE, dataB_sp_1);
    8078:	02000074 	movhi	r8,1

				IOWR_ALTERA_AVALON_PIO_DATA(DATA_A_BASE, dataA_sp_2);
    807c:	03800134 	movhi	r14,4
				IOWR_ALTERA_AVALON_PIO_DATA(DATA_B_BASE, dataB_sp_2);

				IOWR_ALTERA_AVALON_PIO_DATA(DATA_A_BASE, dataA_sp_5);
    8080:	03c00134 	movhi	r15,4
#define MASK_Y 0b00000000000000000000011000000000
#define DATA_B_BASE 0x11050
#define DATA_A_BASE 0x11060
#define PRINTTING_BASE 0x11040

int main(){
    8084:	dfc00015 	stw	ra,0(sp)
	unsigned long dataA_sp_5 = 0b00000000000001000000000010010000;

	//unsigned long dataB_back = 0b01000000000000000000000101000111;
	//unsigned long dataA_back = 0b00000000000001111111111111110001;
	int counter = 0;
	bool refreshed = false;
    8088:	0005883a 	mov	r2,zero
	unsigned long dataB_sp_5 = 0b01100001000100110010000000000000;
	unsigned long dataA_sp_5 = 0b00000000000001000000000010010000;

	//unsigned long dataB_back = 0b01000000000000000000000101000111;
	//unsigned long dataA_back = 0b00000000000001111111111111110001;
	int counter = 0;
    808c:	000d883a 	mov	r6,zero
	//y = 300
	unsigned long dataB_sp_4 = 0b01100001000100100101100000000000;
	unsigned long dataA_sp_4 = 0b00000000000001000000000010000000;

	//y = 400
	unsigned long dataB_sp_5 = 0b01100001000100110010000000000000;
    8090:	18c80004 	addi	r3,r3,8192
	//y = 50
	unsigned long dataB_sp_1 = 0b01100001000100000110010000000000;
	unsigned long dataA_sp_1 = 0b00000000000001000000000001010000;

	//y = 100
	unsigned long dataB_sp_2 = 0b01100001000100001100100000000000;
    8094:	21320004 	addi	r4,r4,-14336
#define DATA_A_BASE 0x11060
#define PRINTTING_BASE 0x11040

int main(){
	//y = 50
	unsigned long dataB_sp_1 = 0b01100001000100000110010000000000;
    8098:	29590004 	addi	r5,r5,25600
	int counter = 0;
	bool refreshed = false;

	while(counter < 280)
	{
		if(IORD(PRINTTING_BASE,0) == 0)
    809c:	63041004 	addi	r12,r12,4160
		{
			if(refreshed == false)
			{
				IOWR_ALTERA_AVALON_PIO_DATA(DATA_A_BASE, dataA_sp_1);
    80a0:	6b401404 	addi	r13,r13,80
    80a4:	39c41804 	addi	r7,r7,4192
				IOWR_ALTERA_AVALON_PIO_DATA(DATA_B_BASE, dataB_sp_1);
    80a8:	42041404 	addi	r8,r8,4176

				IOWR_ALTERA_AVALON_PIO_DATA(DATA_A_BASE, dataA_sp_2);
    80ac:	73801804 	addi	r14,r14,96
				IOWR_ALTERA_AVALON_PIO_DATA(DATA_B_BASE, dataB_sp_2);

				IOWR_ALTERA_AVALON_PIO_DATA(DATA_A_BASE, dataA_sp_5);
    80b0:	7bc02404 	addi	r15,r15,144
				IOWR_ALTERA_AVALON_PIO_DATA(DATA_B_BASE, dataB_sp_5);

				dataB_sp_1 = dataB_sp_1 + MASK_X;
    80b4:	02400434 	movhi	r9,16
	//unsigned long dataB_back = 0b01000000000000000000000101000111;
	//unsigned long dataA_back = 0b00000000000001111111111111110001;
	int counter = 0;
	bool refreshed = false;

	while(counter < 280)
    80b8:	028045c4 	movi	r10,279
	{
		if(IORD(PRINTTING_BASE,0) == 0)
    80bc:	67c00037 	ldwio	ra,0(r12)
    80c0:	02c00074 	movhi	r11,1
    80c4:	5ac41004 	addi	r11,r11,4160
    80c8:	f8000e1e 	bne	ra,zero,8104 <main+0xa8>
		{
			if(refreshed == false)
    80cc:	17c03fcc 	andi	ra,r2,255
    80d0:	f8000d1e 	bne	ra,zero,8108 <main+0xac>
			{
				IOWR_ALTERA_AVALON_PIO_DATA(DATA_A_BASE, dataA_sp_1);
    80d4:	3b400035 	stwio	r13,0(r7)
				IOWR_ALTERA_AVALON_PIO_DATA(DATA_B_BASE, dataB_sp_1);
    80d8:	41400035 	stwio	r5,0(r8)

				IOWR_ALTERA_AVALON_PIO_DATA(DATA_A_BASE, dataA_sp_2);
    80dc:	3b800035 	stwio	r14,0(r7)
				IOWR_ALTERA_AVALON_PIO_DATA(DATA_B_BASE, dataB_sp_2);
    80e0:	41000035 	stwio	r4,0(r8)

				IOWR_ALTERA_AVALON_PIO_DATA(DATA_A_BASE, dataA_sp_5);
    80e4:	3bc00035 	stwio	r15,0(r7)
				IOWR_ALTERA_AVALON_PIO_DATA(DATA_B_BASE, dataB_sp_5);
    80e8:	40c00035 	stwio	r3,0(r8)

				dataB_sp_1 = dataB_sp_1 + MASK_X;
    80ec:	2a4b883a 	add	r5,r5,r9
				dataB_sp_2 = dataB_sp_2 + MASK_X;
    80f0:	2249883a 	add	r4,r4,r9
				dataB_sp_5 = dataB_sp_5 + MASK_X;
    80f4:	1a47883a 	add	r3,r3,r9
				counter++;
    80f8:	31800044 	addi	r6,r6,1
				refreshed = true;
    80fc:	00800044 	movi	r2,1
    8100:	00000106 	br	8108 <main+0xac>
			}
		}else
		{
			refreshed = false;
    8104:	0005883a 	mov	r2,zero
	//unsigned long dataB_back = 0b01000000000000000000000101000111;
	//unsigned long dataA_back = 0b00000000000001111111111111110001;
	int counter = 0;
	bool refreshed = false;

	while(counter < 280)
    8108:	51bfec0e 	bge	r10,r6,80bc <main+0x60>
	{
		if(IORD(PRINTTING_BASE,0) == 0)
		{
			if(refreshed == false)
			{
				IOWR_ALTERA_AVALON_PIO_DATA(DATA_A_BASE, dataA_sp_1);
    810c:	03000134 	movhi	r12,4
    8110:	01c00074 	movhi	r7,1
				IOWR_ALTERA_AVALON_PIO_DATA(DATA_B_BASE, dataB_sp_1);
    8114:	02000074 	movhi	r8,1

				IOWR_ALTERA_AVALON_PIO_DATA(DATA_A_BASE, dataA_sp_2);
    8118:	03400134 	movhi	r13,4
				IOWR_ALTERA_AVALON_PIO_DATA(DATA_B_BASE, dataB_sp_2);

				IOWR_ALTERA_AVALON_PIO_DATA(DATA_A_BASE, dataA_sp_5);
    811c:	03800134 	movhi	r14,4
    8120:	000d883a 	mov	r6,zero
	{
		if(IORD(PRINTTING_BASE,0) == 0)
		{
			if(refreshed == false)
			{
				IOWR_ALTERA_AVALON_PIO_DATA(DATA_A_BASE, dataA_sp_1);
    8124:	63001404 	addi	r12,r12,80
    8128:	39c41804 	addi	r7,r7,4192
				IOWR_ALTERA_AVALON_PIO_DATA(DATA_B_BASE, dataB_sp_1);
    812c:	42041404 	addi	r8,r8,4176

				IOWR_ALTERA_AVALON_PIO_DATA(DATA_A_BASE, dataA_sp_2);
    8130:	6b401804 	addi	r13,r13,96
				IOWR_ALTERA_AVALON_PIO_DATA(DATA_B_BASE, dataB_sp_2);

				IOWR_ALTERA_AVALON_PIO_DATA(DATA_A_BASE, dataA_sp_5);
    8134:	73802404 	addi	r14,r14,144
				IOWR_ALTERA_AVALON_PIO_DATA(DATA_B_BASE, dataB_sp_5);

				dataB_sp_1 = dataB_sp_1 - MASK_X;
    8138:	027ffc34 	movhi	r9,65520
		{
			refreshed = false;
		}
	}
	counter = 0;
	while(counter < 280)
    813c:	028045c4 	movi	r10,279
	{
		if(IORD(PRINTTING_BASE,0) == 0)
    8140:	5bc00037 	ldwio	r15,0(r11)
    8144:	78000e1e 	bne	r15,zero,8180 <main+0x124>
		{
			if(refreshed == false)
    8148:	13c03fcc 	andi	r15,r2,255
    814c:	78000d1e 	bne	r15,zero,8184 <main+0x128>
			{
				IOWR_ALTERA_AVALON_PIO_DATA(DATA_A_BASE, dataA_sp_1);
    8150:	3b000035 	stwio	r12,0(r7)
				IOWR_ALTERA_AVALON_PIO_DATA(DATA_B_BASE, dataB_sp_1);
    8154:	41400035 	stwio	r5,0(r8)

				IOWR_ALTERA_AVALON_PIO_DATA(DATA_A_BASE, dataA_sp_2);
    8158:	3b400035 	stwio	r13,0(r7)
				IOWR_ALTERA_AVALON_PIO_DATA(DATA_B_BASE, dataB_sp_2);
    815c:	41000035 	stwio	r4,0(r8)

				IOWR_ALTERA_AVALON_PIO_DATA(DATA_A_BASE, dataA_sp_5);
    8160:	3b800035 	stwio	r14,0(r7)
				IOWR_ALTERA_AVALON_PIO_DATA(DATA_B_BASE, dataB_sp_5);
    8164:	40c00035 	stwio	r3,0(r8)

				dataB_sp_1 = dataB_sp_1 - MASK_X;
    8168:	2a4b883a 	add	r5,r5,r9
				dataB_sp_2 = dataB_sp_2 - MASK_X;
    816c:	2249883a 	add	r4,r4,r9
				dataB_sp_5 = dataB_sp_5 - MASK_X;
    8170:	1a47883a 	add	r3,r3,r9
				counter++;
    8174:	31800044 	addi	r6,r6,1
				refreshed = true;
    8178:	00800044 	movi	r2,1
    817c:	00000106 	br	8184 <main+0x128>
			}
		}else
		{
			refreshed = false;
    8180:	0005883a 	mov	r2,zero
		{
			refreshed = false;
		}
	}
	counter = 0;
	while(counter < 280)
    8184:	51bfee0e 	bge	r10,r6,8140 <main+0xe4>
		}else
		{
			refreshed = false;
		}
	}
}
    8188:	0005883a 	mov	r2,zero
    818c:	dfc00017 	ldw	ra,0(sp)
    8190:	dec00104 	addi	sp,sp,4
    8194:	f800283a 	ret

00008198 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    8198:	deffff04 	addi	sp,sp,-4
    819c:	01000074 	movhi	r4,1
    81a0:	01400074 	movhi	r5,1
    81a4:	dfc00015 	stw	ra,0(sp)
    81a8:	2120b604 	addi	r4,r4,-32040
    81ac:	2960b704 	addi	r5,r5,-32036

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    81b0:	2140061e 	bne	r4,r5,81cc <alt_load+0x34>
    81b4:	01000074 	movhi	r4,1
    81b8:	01400074 	movhi	r5,1
    81bc:	21200804 	addi	r4,r4,-32736
    81c0:	29600804 	addi	r5,r5,-32736
    81c4:	2140121e 	bne	r4,r5,8210 <alt_load+0x78>
    81c8:	00000b06 	br	81f8 <alt_load+0x60>
    81cc:	00c00074 	movhi	r3,1
    81d0:	18e0b704 	addi	r3,r3,-32036
    81d4:	1907c83a 	sub	r3,r3,r4
    81d8:	0005883a 	mov	r2,zero
  {
    while( to != end )
    81dc:	10fff526 	beq	r2,r3,81b4 <alt_load+0x1c>
    {
      *to++ = *from++;
    81e0:	114f883a 	add	r7,r2,r5
    81e4:	39c00017 	ldw	r7,0(r7)
    81e8:	110d883a 	add	r6,r2,r4
    81ec:	10800104 	addi	r2,r2,4
    81f0:	31c00015 	stw	r7,0(r6)
    81f4:	003ff906 	br	81dc <alt_load+0x44>
    81f8:	01000074 	movhi	r4,1
    81fc:	01400074 	movhi	r5,1
    8200:	2120b604 	addi	r4,r4,-32040
    8204:	2960b604 	addi	r5,r5,-32040

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    8208:	2140101e 	bne	r4,r5,824c <alt_load+0xb4>
    820c:	00000b06 	br	823c <alt_load+0xa4>
    8210:	00c00074 	movhi	r3,1
    8214:	18e00804 	addi	r3,r3,-32736
    8218:	1907c83a 	sub	r3,r3,r4
    821c:	0005883a 	mov	r2,zero
  {
    while( to != end )
    8220:	10fff526 	beq	r2,r3,81f8 <alt_load+0x60>
    {
      *to++ = *from++;
    8224:	114f883a 	add	r7,r2,r5
    8228:	39c00017 	ldw	r7,0(r7)
    822c:	110d883a 	add	r6,r2,r4
    8230:	10800104 	addi	r2,r2,4
    8234:	31c00015 	stw	r7,0(r6)
    8238:	003ff906 	br	8220 <alt_load+0x88>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    823c:	00082c80 	call	82c8 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    8240:	dfc00017 	ldw	ra,0(sp)
    8244:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    8248:	00082cc1 	jmpi	82cc <alt_icache_flush_all>
    824c:	00c00074 	movhi	r3,1
    8250:	18e0b604 	addi	r3,r3,-32040
    8254:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    8258:	0005883a 	mov	r2,zero
  {
    while( to != end )
    825c:	18bff726 	beq	r3,r2,823c <alt_load+0xa4>
    {
      *to++ = *from++;
    8260:	114f883a 	add	r7,r2,r5
    8264:	39c00017 	ldw	r7,0(r7)
    8268:	110d883a 	add	r6,r2,r4
    826c:	10800104 	addi	r2,r2,4
    8270:	31c00015 	stw	r7,0(r6)
    8274:	003ff906 	br	825c <alt_load+0xc4>

00008278 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8278:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    827c:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8280:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    8284:	00082a40 	call	82a4 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    8288:	00082c40 	call	82c4 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    828c:	d1a00217 	ldw	r6,-32760(gp)
    8290:	d1600317 	ldw	r5,-32756(gp)
    8294:	d1200417 	ldw	r4,-32752(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    8298:	dfc00017 	ldw	ra,0(sp)
    829c:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    82a0:	000805c1 	jmpi	805c <main>

000082a4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    82a4:	deffff04 	addi	sp,sp,-4
    82a8:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    82ac:	00082d00 	call	82d0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    82b0:	00800044 	movi	r2,1
    82b4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    82b8:	dfc00017 	ldw	ra,0(sp)
    82bc:	dec00104 	addi	sp,sp,4
    82c0:	f800283a 	ret

000082c4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    82c4:	f800283a 	ret

000082c8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    82c8:	f800283a 	ret

000082cc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    82cc:	f800283a 	ret

000082d0 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    82d0:	000170fa 	wrctl	ienable,zero
    82d4:	f800283a 	ret
