
CollendaProgram.elf:     file format elf32-littlenios2
CollendaProgram.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008020

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x000013a8 memsz 0x000013a8 flags r-x
    LOAD off    0x000023c8 vaddr 0x000093c8 paddr 0x000094c0 align 2**12
         filesz 0x000000f8 memsz 0x000000f8 flags rw-
    LOAD off    0x000025b8 vaddr 0x000095b8 paddr 0x000095b8 align 2**12
         filesz 0x00000000 memsz 0x00000030 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00008020  00008020  000024c0  2**0
                  CONTENTS
  2 .text         000012a8  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000100  000092c8  000092c8  000022c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000000f8  000093c8  000094c0  000023c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000030  000095b8  000095b8  000025b8  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  000095e8  000095e8  000024c0  2**0
                  CONTENTS
  7 .comment      0000004f  00000000  00000000  000024c0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000280  00000000  00000000  00002510  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000089f2  00000000  00000000  00002790  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002113  00000000  00000000  0000b182  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00002a11  00000000  00000000  0000d295  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000003cc  00000000  00000000  0000fca8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001415  00000000  00000000  00010074  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000029c1  00000000  00000000  00011489  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00013e4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000368  00000000  00000000  00013e60  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00015386  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00015389  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00015395  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00015396  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00015397  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0001539b  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0001539f  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  000153a3  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  000153ae  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  000153b9  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  000153c4  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000023  00000000  00000000  000153cf  2**0
                  CONTENTS, READONLY
 29 .jdi          0000528f  00000000  00000000  000153f2  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0005955b  00000000  00000000  0001a681  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
00008020 l    d  .text	00000000 .text
000092c8 l    d  .rodata	00000000 .rodata
000093c8 l    d  .rwdata	00000000 .rwdata
000095b8 l    d  .bss	00000000 .bss
000095e8 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../CollendaProgram_bsp//obj/HAL/src/crt0.o
00008058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 rand.c
000095b8 l     O .bss	00000008 _randbits
00000000 l    df *ABS*	00000000 time.c
00000000 l    df *ABS*	00000000 gettimeofdayr.c
00000000 l    df *ABS*	00000000 impure.c
000093c8 l     O .rwdata	000000e4 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_gettod.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00008bbc g     F .text	0000002c alt_main
000094c0 g       *ABS*	00000000 __flash_rwdata_start
00008310 g     F .text	000000d4 initialize_sprite
000082c0 g     F .text	00000038 sendInstruction
00008830 g     F .text	0000004c _gettimeofday_r
00008cfc g     F .text	00000008 altera_nios2_gen2_irq_init
00008000 g     F .entry	0000000c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
000095c0 g     O .bss	00000004 errno
000095d8 g     O .bss	00000004 alt_argv
000114ac g       *ABS*	00000000 _gp
000083e4 g     F .text	00000028 dataA_builder
00008000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
000086a4 g     F .text	00000064 .hidden __udivsi3
000095cc g     O .bss	00000008 alt_timezone
00008d04 g     F .text	000005c4 .hidden __umoddi3
000094ac g     O .rwdata	00000004 _global_impure_ptr
000095e8 g       *ABS*	00000000 __bss_end
00008c18 g     F .text	000000b8 alt_tick
00008be8 g     F .text	00000030 alt_alarm_stop
00008cf4 g     F .text	00000004 alt_dcache_flush_all
000094c0 g       *ABS*	00000000 __ram_rwdata_end
000093c8 g       *ABS*	00000000 __ram_rodata_end
000094bc g     O .rwdata	00000004 jtag_uart_0
00008708 g     F .text	0000005c .hidden __umodsi3
000095e8 g       *ABS*	00000000 end
0000f530 g       *ABS*	00000000 __alt_stack_pointer
000082f8 g     F .text	00000018 position_instruction_builder
00008020 g     F .text	0000003c _start
000095e4 g     O .bss	00000004 _alt_tick_rate
00008778 g     F .text	00000060 rand
000095e0 g     O .bss	00000004 _alt_nticks
00008cf0 g     F .text	00000004 alt_sys_init
00008980 g     F .text	00000028 .hidden __mulsi3
000093c8 g       *ABS*	00000000 __ram_rwdata_start
000092c8 g       *ABS*	00000000 __ram_rodata_start
000095e8 g       *ABS*	00000000 __alt_stack_base
000089a8 g     F .text	00000134 gettimeofday
000095b8 g       *ABS*	00000000 __bss_start
0000840c g     F .text	000001a4 main
000095d4 g     O .bss	00000004 alt_envp
00008764 g     F .text	00000014 srand
000087d8 g     F .text	00000058 time
000085b0 g     F .text	00000080 .hidden __divsi3
000092c8 g       *ABS*	00000000 __flash_rodata_start
00008cd0 g     F .text	00000020 alt_irq_init
000092c8 g     O .rodata	00000100 .hidden __clz_tab
000094b0 g     O .rwdata	00000004 _impure_ptr
000095dc g     O .bss	00000004 alt_argc
000095c4 g     O .bss	00000008 alt_resettime
00008020 g       *ABS*	00000000 __ram_exceptions_start
000094c0 g       *ABS*	00000000 _edata
000095e8 g       *ABS*	00000000 _end
00008020 g       *ABS*	00000000 __ram_exceptions_end
00008630 g     F .text	00000074 .hidden __modsi3
0000f530 g       *ABS*	00000000 __alt_data_end
0000805c g     F .text	00000264 increase_coordinate
0000800c g       .entry	00000000 _exit
0000887c g     F .text	00000104 .hidden __muldi3
00008cf8 g     F .text	00000004 alt_icache_flush_all
000094b4 g     O .rwdata	00000008 alt_alarm_list
00008adc g     F .text	000000e0 alt_load



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08600814 	ori	at,at,32800
    jmp r1
    8008:	0800683a 	jmp	at

0000800c <_exit>:
	...

Disassembly of section .text:

00008020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    8024:	defd4c14 	ori	sp,sp,62768
    movhi gp, %hi(_gp)
    8028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    802c:	d6852b14 	ori	gp,gp,5292
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8034:	10a56e14 	ori	r2,r2,38328

    movhi r3, %hi(__bss_end)
    8038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    803c:	18e57a14 	ori	r3,r3,38376

    beq r2, r3, 1f
    8040:	10c00326 	beq	r2,r3,8050 <_start+0x30>

0:
    stw zero, (r2)
    8044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    804c:	10fffd36 	bltu	r2,r3,8044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8050:	0008adc0 	call	8adc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8054:	0008bbc0 	call	8bbc <alt_main>

00008058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8058:	003fff06 	br	8058 <alt_after_alt_main>

0000805c <increase_coordinate>:


void increase_coordinate(Sprite *sp){
	int step_x = 0;     				     //Valor inteiro que corresponde a quantidade de passos que o sprite faz no eixo X.
	int step_y = 0;    					     //Valor inteiro que corresponde a quantidade de passos que o sprite faz no eixo Y.	
	step_x = (*sp).mask_x & MASX_TO_SHIFT_X; //Aplica uma operação AND para selecionar os bits da coordenada X.
    805c:	21400417 	ldw	r5,16(r4)
	step_y = (*sp).mask_y & MASX_TO_SHIFT_Y; //Aplica uma operação AND para selecionar os bits da coordenada Y.
    8060:	21c00517 	ldw	r7,20(r4)
	step_x = step_x >> 19;                   //Realiza uma operação de deslocamento para chegar ao valor correto da coordenada.
    8064:	21800217 	ldw	r6,8(r4)
    8068:	2805d4fa 	srai	r2,r5,19
	step_y = step_y >> 9;
    806c:	3807d27a 	srai	r3,r7,9
    8070:	32000228 	cmpgeui	r8,r6,8
	step_x = step_x >> 19;                   //Realiza uma operação de deslocamento para chegar ao valor correto da coordenada.
    8074:	1080ffcc 	andi	r2,r2,1023
	step_y = step_y >> 9;
    8078:	18c0ffcc 	andi	r3,r3,1023
	/*Switch que escolhe quais incrementos/decrementos serão realizados de acordo ao ângulo de movimento do sprite.*/
	switch((*sp).direction){
    807c:	40008f1e 	bne	r8,zero,82bc <increase_coordinate+0x260>
    8080:	300c90ba 	slli	r6,r6,2
    8084:	02000074 	movhi	r8,1
    8088:	3211883a 	add	r8,r6,r8
    808c:	41a02517 	ldw	r6,-32620(r8)
    8090:	3000683a 	jmp	r6
    8094:	000080b4 	movhi	zero,514
    8098:	000080f4 	movhi	zero,515
    809c:	00008168 	cmpgeui	zero,zero,517
    80a0:	00008194 	movui	zero,518
    80a4:	000081e0 	cmpeqi	zero,zero,519
    80a8:	0000821c 	xori	zero,zero,520
    80ac:	00008258 	cmpnei	zero,zero,521
    80b0:	00008284 	movi	zero,522
		case 0:                   							//0 graus   (esquerda)
			(*sp).coord_x -= step_x; 						//Atualiza a coordenada X.
    80b4:	20c00017 	ldw	r3,0(r4)
    80b8:	1885c83a 	sub	r2,r3,r2
			(*sp).inst_B  -= (*sp).mask_x;  		        //Atualiza os bits de instrução.
    80bc:	20c00717 	ldw	r3,28(r4)
			(*sp).coord_x -= step_x; 						//Atualiza a coordenada X.
    80c0:	20800015 	stw	r2,0(r4)
			(*sp).inst_B  -= (*sp).mask_x;  		        //Atualiza os bits de instrução.
    80c4:	194bc83a 	sub	r5,r3,r5
    80c8:	21400715 	stw	r5,28(r4)
			if((*sp).coord_x < 1){                          //Realiza a troca de posição do sprite ao chegar no limite esquerdo da tela.
    80cc:	00807b16 	blt	zero,r2,82bc <increase_coordinate+0x260>
				(*sp).coord_x = 640;
    80d0:	0080a004 	movi	r2,640
    80d4:	20800015 	stw	r2,0(r4)
    data = data << 10;    //desloca o bit de ativação em 10 posições à esquerda.
    data = data | x;      //operação OR com a variável data. (insere x no barramento de bits)
    data = data << 10;    //desloca os bits em 10 posições à esquerda.
    data = data | y;      //operação OR com a variável data. (insere y no barramento de bits)
    data = data << 9;     //desloca os bits em 9 posições à esquerda.
    data = data | offset; //insere o offset.
    80d8:	20800117 	ldw	r2,4(r4)
    80dc:	20c00317 	ldw	r3,12(r4)
    80e0:	1004927a 	slli	r2,r2,9
    80e4:	10c4b03a 	or	r2,r2,r3
    80e8:	108d0034 	orhi	r2,r2,13312
				(*sp).inst_B  = position_instruction_builder((*sp).coord_x, (*sp).coord_y, (*sp).offset);
    80ec:	20800715 	stw	r2,28(r4)
    80f0:	f800283a 	ret
			(*sp).coord_x += step_x; 						//Atualiza a coordenada X.
    80f4:	21800017 	ldw	r6,0(r4)
    80f8:	1185883a 	add	r2,r2,r6
			(*sp).coord_y -= step_y; 						//Atualiza a coordenada Y.
    80fc:	21800117 	ldw	r6,4(r4)
			(*sp).coord_x += step_x; 						//Atualiza a coordenada X.
    8100:	20800015 	stw	r2,0(r4)
			(*sp).coord_y -= step_y; 						//Atualiza a coordenada Y.
    8104:	30c7c83a 	sub	r3,r6,r3
			(*sp).inst_B  += (*sp).mask_x;  		        //Atualiza os bits de instrução em X.
    8108:	21800717 	ldw	r6,28(r4)
			(*sp).coord_y -= step_y; 						//Atualiza a coordenada Y.
    810c:	20c00115 	stw	r3,4(r4)
			(*sp).inst_B  += (*sp).mask_x;  		        //Atualiza os bits de instrução em X.
    8110:	298b883a 	add	r5,r5,r6
			(*sp).inst_B  -= (*sp).mask_y;  		        //Atualiza os bits de instrução em Y.
    8114:	29cbc83a 	sub	r5,r5,r7
    8118:	21400715 	stw	r5,28(r4)
			if((*sp).coord_y < 0){                          //Realiza a troca de posição do sprite ao chegar no limite superior da tela.
    811c:	1800090e 	bge	r3,zero,8144 <increase_coordinate+0xe8>
				(*sp).coord_y = 480;
    8120:	00c07804 	movi	r3,480
    8124:	20c00115 	stw	r3,4(r4)
    data = data | offset; //insere o offset.
    8128:	20c00317 	ldw	r3,12(r4)
    812c:	100494fa 	slli	r2,r2,19
    8130:	10c4b03a 	or	r2,r2,r3
    8134:	00c80134 	movhi	r3,8196
    8138:	18f00004 	addi	r3,r3,-16384
    813c:	10c4b03a 	or	r2,r2,r3
    8140:	003fea06 	br	80ec <increase_coordinate+0x90>
			}else if((*sp).coord_x > 640){                  //Realiza a troca de posição do sprite ao chegar no limite direito da tela.
    8144:	1080a050 	cmplti	r2,r2,641
    8148:	10005c1e 	bne	r2,zero,82bc <increase_coordinate+0x260>
    data = data | offset; //insere o offset.
    814c:	1806927a 	slli	r3,r3,9
    8150:	20800317 	ldw	r2,12(r4)
				(*sp).coord_x = 0;
    8154:	20000015 	stw	zero,0(r4)
    data = data | offset; //insere o offset.
    8158:	1886b03a 	or	r3,r3,r2
    815c:	18c80034 	orhi	r3,r3,8192
				(*sp).inst_B  = position_instruction_builder((*sp).coord_x, (*sp).coord_y, (*sp).offset);
    8160:	20c00715 	stw	r3,28(r4)
}
    8164:	00005506 	br	82bc <increase_coordinate+0x260>
			(*sp).coord_y -= step_y; 						//Atualiza a coordenada Y.
    8168:	20800117 	ldw	r2,4(r4)
			(*sp).inst_B  -= (*sp).mask_y;  		        //Atualiza os bits de instrução.
    816c:	21400717 	ldw	r5,28(r4)
			(*sp).coord_y -= step_y; 						//Atualiza a coordenada Y.
    8170:	10c7c83a 	sub	r3,r2,r3
			(*sp).inst_B  -= (*sp).mask_y;  		        //Atualiza os bits de instrução.
    8174:	29cbc83a 	sub	r5,r5,r7
			(*sp).coord_y -= step_y; 						//Atualiza a coordenada Y.
    8178:	20c00115 	stw	r3,4(r4)
			(*sp).inst_B  -= (*sp).mask_y;  		        //Atualiza os bits de instrução.
    817c:	21400715 	stw	r5,28(r4)
			if((*sp).coord_y < 0){                          //Realiza a troca de posição do sprite ao chegar no limite superior da tela.
    8180:	18004e0e 	bge	r3,zero,82bc <increase_coordinate+0x260>
				(*sp).coord_y = 480;
    8184:	00807804 	movi	r2,480
    8188:	20800115 	stw	r2,4(r4)
    data = data | offset; //insere o offset.
    818c:	20800017 	ldw	r2,0(r4)
    8190:	003fe506 	br	8128 <increase_coordinate+0xcc>
			(*sp).coord_x -= step_x; 						//Atualiza a coordenada X.
    8194:	21800017 	ldw	r6,0(r4)
			(*sp).inst_B  -= (*sp).mask_y;  		        //Atualiza os bits de instrução em Y.
    8198:	29cb883a 	add	r5,r5,r7
			(*sp).coord_x -= step_x; 						//Atualiza a coordenada X.
    819c:	3085c83a 	sub	r2,r6,r2
			(*sp).coord_y -= step_y; 						//Atualiza a coordenada Y.
    81a0:	21800117 	ldw	r6,4(r4)
			(*sp).coord_x -= step_x; 						//Atualiza a coordenada X.
    81a4:	20800015 	stw	r2,0(r4)
			(*sp).coord_y -= step_y; 						//Atualiza a coordenada Y.
    81a8:	30c7c83a 	sub	r3,r6,r3
			(*sp).inst_B  -= (*sp).mask_y;  		        //Atualiza os bits de instrução em Y.
    81ac:	21800717 	ldw	r6,28(r4)
			(*sp).coord_y -= step_y; 						//Atualiza a coordenada Y.
    81b0:	20c00115 	stw	r3,4(r4)
			(*sp).inst_B  -= (*sp).mask_y;  		        //Atualiza os bits de instrução em Y.
    81b4:	314bc83a 	sub	r5,r6,r5
    81b8:	21400715 	stw	r5,28(r4)
			if((*sp).coord_y < 0){                          //Realiza a troca de posição do sprite ao chegar no limite superior da tela.
    81bc:	183fd816 	blt	r3,zero,8120 <increase_coordinate+0xc4>
			}else if((*sp).coord_x < 1){                    //Realiza a troca de posição do sprite ao chegar no limite esquerdo da tela.
    81c0:	00803e16 	blt	zero,r2,82bc <increase_coordinate+0x260>
				(*sp).coord_x = 640;
    81c4:	0080a004 	movi	r2,640
    data = data | offset; //insere o offset.
    81c8:	1806927a 	slli	r3,r3,9
				(*sp).coord_x = 640;
    81cc:	20800015 	stw	r2,0(r4)
    data = data | offset; //insere o offset.
    81d0:	20800317 	ldw	r2,12(r4)
    81d4:	1886b03a 	or	r3,r3,r2
    81d8:	18cd0034 	orhi	r3,r3,13312
    81dc:	003fe006 	br	8160 <increase_coordinate+0x104>
			(*sp).coord_x += step_x; 						//Atualiza a coordenada X.
    81e0:	20c00017 	ldw	r3,0(r4)
    81e4:	10c5883a 	add	r2,r2,r3
			(*sp).inst_B  += (*sp).mask_x;  		        //Atualiza os bits de instrução.
    81e8:	20c00717 	ldw	r3,28(r4)
			(*sp).coord_x += step_x; 						//Atualiza a coordenada X.
    81ec:	20800015 	stw	r2,0(r4)
			if((*sp).coord_x > 640){                        //Realiza a troca de posição do sprite ao chegar no limite direito da tela.
    81f0:	1080a050 	cmplti	r2,r2,641
			(*sp).inst_B  += (*sp).mask_x;  		        //Atualiza os bits de instrução.
    81f4:	194b883a 	add	r5,r3,r5
    81f8:	21400715 	stw	r5,28(r4)
			if((*sp).coord_x > 640){                        //Realiza a troca de posição do sprite ao chegar no limite direito da tela.
    81fc:	10002f1e 	bne	r2,zero,82bc <increase_coordinate+0x260>
    data = data | offset; //insere o offset.
    8200:	20800117 	ldw	r2,4(r4)
				(*sp).coord_x = 0;
    8204:	20000015 	stw	zero,0(r4)
    data = data | offset; //insere o offset.
    8208:	1004927a 	slli	r2,r2,9
    820c:	20c00317 	ldw	r3,12(r4)
    8210:	10c4b03a 	or	r2,r2,r3
    8214:	10880034 	orhi	r2,r2,8192
    8218:	003fb406 	br	80ec <increase_coordinate+0x90>
			(*sp).coord_x -= step_x; 						//Atualiza a coordenada X.
    821c:	21800017 	ldw	r6,0(r4)
    8220:	3085c83a 	sub	r2,r6,r2
			(*sp).coord_y += step_y; 						//Atualiza a coordenada Y.
    8224:	21800117 	ldw	r6,4(r4)
			(*sp).coord_x -= step_x; 						//Atualiza a coordenada X.
    8228:	20800015 	stw	r2,0(r4)
			(*sp).coord_y += step_y; 						//Atualiza a coordenada Y.
    822c:	1987883a 	add	r3,r3,r6
			(*sp).inst_B  += (*sp).mask_y;  		        //Atualiza os bits de instrução em Y.
    8230:	21800717 	ldw	r6,28(r4)
			(*sp).coord_y += step_y; 						//Atualiza a coordenada Y.
    8234:	20c00115 	stw	r3,4(r4)
			(*sp).inst_B  += (*sp).mask_y;  		        //Atualiza os bits de instrução em Y.
    8238:	398f883a 	add	r7,r7,r6
    823c:	394bc83a 	sub	r5,r7,r5
    8240:	21400715 	stw	r5,28(r4)
			if((*sp).coord_y > 480){                        //Realiza a troca de posição do sprite ao chegar no limite inferior da tela.
    8244:	19407850 	cmplti	r5,r3,481
    8248:	283fdd1e 	bne	r5,zero,81c0 <increase_coordinate+0x164>
				(*sp).coord_y = 0;
    824c:	20000115 	stw	zero,4(r4)
    data = data | offset; //insere o offset.
    8250:	100494fa 	slli	r2,r2,19
    8254:	003fed06 	br	820c <increase_coordinate+0x1b0>
			(*sp).coord_y += step_y; 						//Atualiza a coordenada Y.
    8258:	20800117 	ldw	r2,4(r4)
			(*sp).inst_B  += (*sp).mask_y;  		        //Atualiza os bits de instrução.
    825c:	21400717 	ldw	r5,28(r4)
			(*sp).coord_y += step_y; 						//Atualiza a coordenada Y.
    8260:	1887883a 	add	r3,r3,r2
			(*sp).inst_B  += (*sp).mask_y;  		        //Atualiza os bits de instrução.
    8264:	29cb883a 	add	r5,r5,r7
			(*sp).coord_y += step_y; 						//Atualiza a coordenada Y.
    8268:	20c00115 	stw	r3,4(r4)
			(*sp).inst_B  += (*sp).mask_y;  		        //Atualiza os bits de instrução.
    826c:	21400715 	stw	r5,28(r4)
			if((*sp).coord_y > 480){                        //Realiza a troca de posição do sprite ao chegar no limite inferior da tela.
    8270:	18c07850 	cmplti	r3,r3,481
    8274:	1800111e 	bne	r3,zero,82bc <increase_coordinate+0x260>
    data = data | offset; //insere o offset.
    8278:	20800017 	ldw	r2,0(r4)
				(*sp).coord_y = 0;
    827c:	20000115 	stw	zero,4(r4)
    return data;		
    8280:	003ff306 	br	8250 <increase_coordinate+0x1f4>
			(*sp).coord_x += step_x; 						//Atualiza a coordenada X.
    8284:	21800017 	ldw	r6,0(r4)
			(*sp).inst_B  += (*sp).mask_y;  		        //Atualiza os bits de instrução em Y.
    8288:	29cb883a 	add	r5,r5,r7
			(*sp).coord_x += step_x; 						//Atualiza a coordenada X.
    828c:	1185883a 	add	r2,r2,r6
			(*sp).coord_y += step_y; 						//Atualiza a coordenada Y.
    8290:	21800117 	ldw	r6,4(r4)
			(*sp).coord_x += step_x; 						//Atualiza a coordenada X.
    8294:	20800015 	stw	r2,0(r4)
			(*sp).coord_y += step_y; 						//Atualiza a coordenada Y.
    8298:	1987883a 	add	r3,r3,r6
			(*sp).inst_B  += (*sp).mask_y;  		        //Atualiza os bits de instrução em Y.
    829c:	21800717 	ldw	r6,28(r4)
			(*sp).coord_y += step_y; 						//Atualiza a coordenada Y.
    82a0:	20c00115 	stw	r3,4(r4)
			(*sp).inst_B  += (*sp).mask_y;  		        //Atualiza os bits de instrução em Y.
    82a4:	314b883a 	add	r5,r6,r5
    82a8:	21400715 	stw	r5,28(r4)
			if((*sp).coord_y > 480){                        //Realiza a troca de posição do sprite ao chegar no limite inferior da tela.
    82ac:	19407850 	cmplti	r5,r3,481
    82b0:	283f9b26 	beq	r5,zero,8120 <increase_coordinate+0xc4>
			}else if((*sp).coord_x > 640){                  //Realiza a troca de posição do sprite ao chegar no limite direito da tela.
    82b4:	1080a050 	cmplti	r2,r2,641
    82b8:	103fc226 	beq	r2,zero,81c4 <increase_coordinate+0x168>
}
    82bc:	f800283a 	ret

000082c0 <sendInstruction>:
	if(IORD(WRFULL_BASE,0) == 0){                           //FIFO não está cheia
    82c0:	00800074 	movhi	r2,1
    82c4:	10841c37 	ldwio	r2,4208(r2)
    82c8:	1000091e 	bne	r2,zero,82f0 <sendInstruction+0x30>
		IOWR_ALTERA_AVALON_PIO_DATA(WRREG_BASE,0);          //Desabilita o sinal de escrita
    82cc:	00800074 	movhi	r2,1
    82d0:	10042035 	stwio	zero,4224(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(DATA_A_BASE,dataA);  //Envia o dataA
    82d4:	11042c35 	stwio	r4,4272(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(DATA_B_BASE,dataB);  //Envia o dataB
    82d8:	11442835 	stwio	r5,4256(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(WRREG_BASE,1);
    82dc:	00c00044 	movi	r3,1
    82e0:	10c42035 	stwio	r3,4224(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(WRREG_BASE,0);
    82e4:	10042035 	stwio	zero,4224(r2)
    82e8:	00800044 	movi	r2,1
    82ec:	f800283a 	ret
		return 0;
    82f0:	0005883a 	mov	r2,zero
}
    82f4:	f800283a 	ret

000082f8 <position_instruction_builder>:
    data = data | offset; //insere o offset.
    82f8:	200892ba 	slli	r4,r4,10
    82fc:	2148b03a 	or	r4,r4,r5
    8300:	2008927a 	slli	r4,r4,9
    8304:	2188b03a 	or	r4,r4,r6
}
    8308:	20880034 	orhi	r2,r4,8192
    830c:	f800283a 	ret

00008310 <initialize_sprite>:

void initialize_sprite(int step_x, int step_y, int offset, Sprite *sp){
    8310:	defffb04 	addi	sp,sp,-20
    8314:	dfc00415 	stw	ra,16(sp)
    8318:	dcc00315 	stw	r19,12(sp)
    831c:	dc800215 	stw	r18,8(sp)
    8320:	dc400115 	stw	r17,4(sp)
    8324:	dc000015 	stw	r16,0(sp)
    8328:	3027883a 	mov	r19,r6
    832c:	3821883a 	mov	r16,r7
    8330:	2025883a 	mov	r18,r4
    8334:	2823883a 	mov	r17,r5
	(*sp).coord_x   = 1 + rand() % 639;     //sorteio da posição x.
    8338:	00087780 	call	8778 <rand>
    833c:	01409fc4 	movi	r5,639
    8340:	1009883a 	mov	r4,r2
    8344:	00086300 	call	8630 <__modsi3>
    8348:	10800044 	addi	r2,r2,1
    834c:	80800015 	stw	r2,0(r16)
	(*sp).coord_y   = 1 + rand() % 439;     //sorteio da posição y.
    8350:	00087780 	call	8778 <rand>
    8354:	01406dc4 	movi	r5,439
    8358:	1009883a 	mov	r4,r2
    835c:	00086300 	call	8630 <__modsi3>
    8360:	10800044 	addi	r2,r2,1
    8364:	80800115 	stw	r2,4(r16)
	(*sp).offset    = offset;               //definição do offset de memória.
    8368:	84c00315 	stw	r19,12(r16)
	(*sp).direction = rand() % 7;           //sorteio do ângulo inicial de movimento do sprite.
    836c:	00087780 	call	8778 <rand>
    8370:	014001c4 	movi	r5,7
    8374:	1009883a 	mov	r4,r2
    8378:	00086300 	call	8630 <__modsi3>
    837c:	80800215 	stw	r2,8(r16)
    data = data | offset; //insere o offset.
    8380:	80800017 	ldw	r2,0(r16)
    8384:	80c00117 	ldw	r3,4(r16)
	(*sp).inst_B    = position_instruction_builder((*sp).coord_x, (*sp).coord_y, (*sp).offset);
	(*sp).inst_A    = 0;
	(*sp).mask_x    = MASX_TO_SHIFT_X & (step_x << 19);
    8388:	902494fa 	slli	r18,r18,19
    data = data | offset; //insere o offset.
    838c:	100492ba 	slli	r2,r2,10
	(*sp).mask_y    = MASX_TO_SHIFT_Y & (step_y << 9);
    8390:	8822927a 	slli	r17,r17,9
    8394:	01400234 	movhi	r5,8
    data = data | offset; //insere o offset.
    8398:	10c4b03a 	or	r2,r2,r3
    839c:	1004927a 	slli	r2,r2,9
    83a0:	80c00317 	ldw	r3,12(r16)
	(*sp).mask_y    = MASX_TO_SHIFT_Y & (step_y << 9);
    83a4:	297f8004 	addi	r5,r5,-512
	(*sp).mask_x    = MASX_TO_SHIFT_X & (step_x << 19);
    83a8:	9487fe2c 	andhi	r18,r18,8184
    data = data | offset; //insere o offset.
    83ac:	10c4b03a 	or	r2,r2,r3
    83b0:	10880034 	orhi	r2,r2,8192
	(*sp).mask_y    = MASX_TO_SHIFT_Y & (step_y << 9);
    83b4:	8962703a 	and	r17,r17,r5
	(*sp).inst_B    = position_instruction_builder((*sp).coord_x, (*sp).coord_y, (*sp).offset);
    83b8:	80800715 	stw	r2,28(r16)
	(*sp).inst_A    = 0;
    83bc:	80000615 	stw	zero,24(r16)
	(*sp).mask_x    = MASX_TO_SHIFT_X & (step_x << 19);
    83c0:	84800415 	stw	r18,16(r16)
	(*sp).mask_y    = MASX_TO_SHIFT_Y & (step_y << 9);
    83c4:	84400515 	stw	r17,20(r16)
}
    83c8:	dfc00417 	ldw	ra,16(sp)
    83cc:	dcc00317 	ldw	r19,12(sp)
    83d0:	dc800217 	ldw	r18,8(sp)
    83d4:	dc400117 	ldw	r17,4(sp)
    83d8:	dc000017 	ldw	r16,0(sp)
    83dc:	dec00504 	addi	sp,sp,20
    83e0:	f800283a 	ret

000083e4 <dataA_builder>:


unsigned long dataA_builder(int opcode, int reg, int memory_address){
	unsigned long data = 0b00000000000000000000000000000000;
	switch(opcode){
    83e4:	20000426 	beq	r4,zero,83f8 <dataA_builder+0x14>
    83e8:	21000060 	cmpeqi	r4,r4,1
    83ec:	2000041e 	bne	r4,zero,8400 <dataA_builder+0x1c>
    83f0:	0005883a 	mov	r2,zero
    83f4:	f800283a 	ret
		case(0):                                //instrução de escrita no banco de registradores.
			data = data | reg;                  //operação OR (adiciona o número do registrador)
			data = data << 4;                   //deslocamento à esquerda em 4 posições.
    83f8:	2804913a 	slli	r2,r5,4
			data = data | opcode;               //operação OR (adiciona o opcode).
			break;
    83fc:	f800283a 	ret
		case(1):                                //instrução de escrita na memória de sprites.
			data = data | memory_address;       //operação OR (adiciona o endereço de memória)
			data = data << 4;                   //deslocamento à esquerda em 4 posições.
    8400:	3004913a 	slli	r2,r6,4
			data = data | opcode;               //operação OR (adiciona o opcode).
    8404:	10800054 	ori	r2,r2,1
			break;
	}
	return data;
}
    8408:	f800283a 	ret

0000840c <main>:
int main(){
    840c:	deffbf04 	addi	sp,sp,-260
	srand(time(NULL));
    8410:	0009883a 	mov	r4,zero
int main(){
    8414:	dfc04015 	stw	ra,256(sp)
	srand(time(NULL));
    8418:	00087d80 	call	87d8 <time>
    841c:	1009883a 	mov	r4,r2
    8420:	00087640 	call	8764 <srand>
	initialize_sprite(5,5,0,&ast_1);
    8424:	d80f883a 	mov	r7,sp
    8428:	000d883a 	mov	r6,zero
    842c:	01400144 	movi	r5,5
    8430:	01000144 	movi	r4,5
    8434:	00083100 	call	8310 <initialize_sprite>
	initialize_sprite(5,5,0,&ast_2);
    8438:	d9c00804 	addi	r7,sp,32
    843c:	000d883a 	mov	r6,zero
    8440:	01400144 	movi	r5,5
    8444:	01000144 	movi	r4,5
    8448:	00083100 	call	8310 <initialize_sprite>
	initialize_sprite(5,5,0,&ast_3);
    844c:	d9c01004 	addi	r7,sp,64
    8450:	000d883a 	mov	r6,zero
    8454:	01400144 	movi	r5,5
    8458:	01000144 	movi	r4,5
    845c:	00083100 	call	8310 <initialize_sprite>
	initialize_sprite(5,5,0,&ast_4);
    8460:	d9c01804 	addi	r7,sp,96
    8464:	000d883a 	mov	r6,zero
    8468:	01400144 	movi	r5,5
    846c:	01000144 	movi	r4,5
    8470:	00083100 	call	8310 <initialize_sprite>
	initialize_sprite(5,5,0,&ast_5);
    8474:	d9c02004 	addi	r7,sp,128
    8478:	000d883a 	mov	r6,zero
    847c:	01400144 	movi	r5,5
    8480:	01000144 	movi	r4,5
    8484:	00083100 	call	8310 <initialize_sprite>
	initialize_sprite(5,5,0,&ast_6);
    8488:	d9c02804 	addi	r7,sp,160
    848c:	000d883a 	mov	r6,zero
    8490:	01400144 	movi	r5,5
    8494:	01000144 	movi	r4,5
    8498:	00083100 	call	8310 <initialize_sprite>
	initialize_sprite(5,5,0,&ast_7);
    849c:	d9c03004 	addi	r7,sp,192
    84a0:	000d883a 	mov	r6,zero
    84a4:	01400144 	movi	r5,5
    84a8:	01000144 	movi	r4,5
    84ac:	00083100 	call	8310 <initialize_sprite>
	initialize_sprite(5,5,0,&ast_8);
    84b0:	d9c03804 	addi	r7,sp,224
    84b4:	000d883a 	mov	r6,zero
    84b8:	01400144 	movi	r5,5
    84bc:	01000144 	movi	r4,5
    84c0:	00083100 	call	8310 <initialize_sprite>
	ast_1.inst_A = dataA_builder(0,1,0);
    84c4:	00800404 	movi	r2,16
    84c8:	d8800615 	stw	r2,24(sp)
	ast_2.inst_A = dataA_builder(0,2,0);
    84cc:	00800804 	movi	r2,32
    84d0:	d8800e15 	stw	r2,56(sp)
	ast_3.inst_A = dataA_builder(0,3,0);
    84d4:	00800c04 	movi	r2,48
    84d8:	d8801615 	stw	r2,88(sp)
	ast_4.inst_A = dataA_builder(0,4,0);
    84dc:	00801004 	movi	r2,64
    84e0:	d8801e15 	stw	r2,120(sp)
	ast_5.inst_A = dataA_builder(0,5,0);
    84e4:	00801404 	movi	r2,80
    84e8:	d8802615 	stw	r2,152(sp)
	ast_6.inst_A = dataA_builder(0,6,0);
    84ec:	00801804 	movi	r2,96
    84f0:	d8802e15 	stw	r2,184(sp)
	ast_7.inst_A = dataA_builder(0,7,0);
    84f4:	00801c04 	movi	r2,112
    84f8:	d8803615 	stw	r2,216(sp)
	ast_8.inst_A = dataA_builder(0,8,0);
    84fc:	00802004 	movi	r2,128
    8500:	d8803e15 	stw	r2,248(sp)
		if(IORD(SCREEN_BASE,0) == 1){
    8504:	00800074 	movhi	r2,1
    8508:	10841837 	ldwio	r2,4192(r2)
    850c:	10c00058 	cmpnei	r3,r2,1
    8510:	183ffc1e 	bne	r3,zero,8504 <main+0xf8>
			IOWR_ALTERA_AVALON_PIO_DATA(RESET_PULSECOUNTER_BASE,1);
    8514:	00c00074 	movhi	r3,1
    8518:	18842435 	stwio	r2,4240(r3)
			IOWR_ALTERA_AVALON_PIO_DATA(RESET_PULSECOUNTER_BASE,0);
    851c:	00800074 	movhi	r2,1
    8520:	10042435 	stwio	zero,4240(r2)
		if(IORD(SCREEN_BASE,0) == 1){
    8524:	00800074 	movhi	r2,1
    8528:	10841837 	ldwio	r2,4192(r2)
    852c:	10c00058 	cmpnei	r3,r2,1
    8530:	183ffc1e 	bne	r3,zero,8524 <main+0x118>
			IOWR_ALTERA_AVALON_PIO_DATA(RESET_PULSECOUNTER_BASE,1);
    8534:	00c00074 	movhi	r3,1
    8538:	18842435 	stwio	r2,4240(r3)
			IOWR_ALTERA_AVALON_PIO_DATA(RESET_PULSECOUNTER_BASE,0);
    853c:	00800074 	movhi	r2,1
    8540:	10042435 	stwio	zero,4240(r2)
			increase_coordinate(&ast_1);
    8544:	d809883a 	mov	r4,sp
    8548:	000805c0 	call	805c <increase_coordinate>
			increase_coordinate(&ast_2);
    854c:	d9000804 	addi	r4,sp,32
    8550:	000805c0 	call	805c <increase_coordinate>
			increase_coordinate(&ast_3);
    8554:	d9001004 	addi	r4,sp,64
    8558:	000805c0 	call	805c <increase_coordinate>
			increase_coordinate(&ast_4);
    855c:	d9001804 	addi	r4,sp,96
    8560:	000805c0 	call	805c <increase_coordinate>
			if(IORD(WRFULL_BASE,0) == 0){                           //FIFO não está cheia
    8564:	00800074 	movhi	r2,1
    8568:	10841c37 	ldwio	r2,4208(r2)
    856c:	10000d1e 	bne	r2,zero,85a4 <main+0x198>
				sendInstruction(ast_1.inst_A, ast_1.inst_B);
    8570:	d9400717 	ldw	r5,28(sp)
    8574:	d9000617 	ldw	r4,24(sp)
    8578:	00082c00 	call	82c0 <sendInstruction>
				sendInstruction(ast_2.inst_A, ast_2.inst_B);
    857c:	d9400f17 	ldw	r5,60(sp)
    8580:	d9000e17 	ldw	r4,56(sp)
    8584:	00082c00 	call	82c0 <sendInstruction>
				sendInstruction(ast_3.inst_A, ast_3.inst_B); //esse
    8588:	d9401717 	ldw	r5,92(sp)
    858c:	d9001617 	ldw	r4,88(sp)
    8590:	00082c00 	call	82c0 <sendInstruction>
				sendInstruction(ast_4.inst_A, ast_4.inst_B); //esse
    8594:	d9401f17 	ldw	r5,124(sp)
    8598:	d9001e17 	ldw	r4,120(sp)
    859c:	00082c00 	call	82c0 <sendInstruction>
    85a0:	003fd806 	br	8504 <main+0xf8>
				IOWR_ALTERA_AVALON_PIO_DATA(WRREG_BASE,0);         //Desabilita o sinal de escrita
    85a4:	00800074 	movhi	r2,1
    85a8:	10042035 	stwio	zero,4224(r2)
    85ac:	003fd506 	br	8504 <main+0xf8>

000085b0 <__divsi3>:
    85b0:	20001a16 	blt	r4,zero,861c <__divsi3+0x6c>
    85b4:	000f883a 	mov	r7,zero
    85b8:	2800020e 	bge	r5,zero,85c4 <__divsi3+0x14>
    85bc:	014bc83a 	sub	r5,zero,r5
    85c0:	39c0005c 	xori	r7,r7,1
    85c4:	200d883a 	mov	r6,r4
    85c8:	00c00044 	movi	r3,1
    85cc:	2900092e 	bgeu	r5,r4,85f4 <__divsi3+0x44>
    85d0:	00800804 	movi	r2,32
    85d4:	00c00044 	movi	r3,1
    85d8:	00000106 	br	85e0 <__divsi3+0x30>
    85dc:	10001226 	beq	r2,zero,8628 <__divsi3+0x78>
    85e0:	294b883a 	add	r5,r5,r5
    85e4:	10bfffc4 	addi	r2,r2,-1
    85e8:	18c7883a 	add	r3,r3,r3
    85ec:	293ffb36 	bltu	r5,r4,85dc <__divsi3+0x2c>
    85f0:	18000d26 	beq	r3,zero,8628 <__divsi3+0x78>
    85f4:	0005883a 	mov	r2,zero
    85f8:	31400236 	bltu	r6,r5,8604 <__divsi3+0x54>
    85fc:	314dc83a 	sub	r6,r6,r5
    8600:	10c4b03a 	or	r2,r2,r3
    8604:	1806d07a 	srli	r3,r3,1
    8608:	280ad07a 	srli	r5,r5,1
    860c:	183ffa1e 	bne	r3,zero,85f8 <__divsi3+0x48>
    8610:	38000126 	beq	r7,zero,8618 <__divsi3+0x68>
    8614:	0085c83a 	sub	r2,zero,r2
    8618:	f800283a 	ret
    861c:	0109c83a 	sub	r4,zero,r4
    8620:	01c00044 	movi	r7,1
    8624:	003fe406 	br	85b8 <__divsi3+0x8>
    8628:	0005883a 	mov	r2,zero
    862c:	003ff806 	br	8610 <__divsi3+0x60>

00008630 <__modsi3>:
    8630:	20001916 	blt	r4,zero,8698 <__modsi3+0x68>
    8634:	000f883a 	mov	r7,zero
    8638:	2005883a 	mov	r2,r4
    863c:	2800010e 	bge	r5,zero,8644 <__modsi3+0x14>
    8640:	014bc83a 	sub	r5,zero,r5
    8644:	00c00044 	movi	r3,1
    8648:	2900092e 	bgeu	r5,r4,8670 <__modsi3+0x40>
    864c:	01800804 	movi	r6,32
    8650:	00c00044 	movi	r3,1
    8654:	00000106 	br	865c <__modsi3+0x2c>
    8658:	30000d26 	beq	r6,zero,8690 <__modsi3+0x60>
    865c:	294b883a 	add	r5,r5,r5
    8660:	31bfffc4 	addi	r6,r6,-1
    8664:	18c7883a 	add	r3,r3,r3
    8668:	293ffb36 	bltu	r5,r4,8658 <__modsi3+0x28>
    866c:	18000826 	beq	r3,zero,8690 <__modsi3+0x60>
    8670:	1806d07a 	srli	r3,r3,1
    8674:	11400136 	bltu	r2,r5,867c <__modsi3+0x4c>
    8678:	1145c83a 	sub	r2,r2,r5
    867c:	280ad07a 	srli	r5,r5,1
    8680:	183ffb1e 	bne	r3,zero,8670 <__modsi3+0x40>
    8684:	38000126 	beq	r7,zero,868c <__modsi3+0x5c>
    8688:	0085c83a 	sub	r2,zero,r2
    868c:	f800283a 	ret
    8690:	2005883a 	mov	r2,r4
    8694:	003ffb06 	br	8684 <__modsi3+0x54>
    8698:	0109c83a 	sub	r4,zero,r4
    869c:	01c00044 	movi	r7,1
    86a0:	003fe506 	br	8638 <__modsi3+0x8>

000086a4 <__udivsi3>:
    86a4:	200d883a 	mov	r6,r4
    86a8:	2900152e 	bgeu	r5,r4,8700 <__udivsi3+0x5c>
    86ac:	28001416 	blt	r5,zero,8700 <__udivsi3+0x5c>
    86b0:	00800804 	movi	r2,32
    86b4:	00c00044 	movi	r3,1
    86b8:	00000206 	br	86c4 <__udivsi3+0x20>
    86bc:	10000e26 	beq	r2,zero,86f8 <__udivsi3+0x54>
    86c0:	28000516 	blt	r5,zero,86d8 <__udivsi3+0x34>
    86c4:	294b883a 	add	r5,r5,r5
    86c8:	10bfffc4 	addi	r2,r2,-1
    86cc:	18c7883a 	add	r3,r3,r3
    86d0:	293ffa36 	bltu	r5,r4,86bc <__udivsi3+0x18>
    86d4:	18000826 	beq	r3,zero,86f8 <__udivsi3+0x54>
    86d8:	0005883a 	mov	r2,zero
    86dc:	31400236 	bltu	r6,r5,86e8 <__udivsi3+0x44>
    86e0:	314dc83a 	sub	r6,r6,r5
    86e4:	10c4b03a 	or	r2,r2,r3
    86e8:	1806d07a 	srli	r3,r3,1
    86ec:	280ad07a 	srli	r5,r5,1
    86f0:	183ffa1e 	bne	r3,zero,86dc <__udivsi3+0x38>
    86f4:	f800283a 	ret
    86f8:	0005883a 	mov	r2,zero
    86fc:	f800283a 	ret
    8700:	00c00044 	movi	r3,1
    8704:	003ff406 	br	86d8 <__udivsi3+0x34>

00008708 <__umodsi3>:
    8708:	2005883a 	mov	r2,r4
    870c:	2900132e 	bgeu	r5,r4,875c <__umodsi3+0x54>
    8710:	28001216 	blt	r5,zero,875c <__umodsi3+0x54>
    8714:	01800804 	movi	r6,32
    8718:	00c00044 	movi	r3,1
    871c:	00000206 	br	8728 <__umodsi3+0x20>
    8720:	30000c26 	beq	r6,zero,8754 <__umodsi3+0x4c>
    8724:	28000516 	blt	r5,zero,873c <__umodsi3+0x34>
    8728:	294b883a 	add	r5,r5,r5
    872c:	31bfffc4 	addi	r6,r6,-1
    8730:	18c7883a 	add	r3,r3,r3
    8734:	293ffa36 	bltu	r5,r4,8720 <__umodsi3+0x18>
    8738:	18000626 	beq	r3,zero,8754 <__umodsi3+0x4c>
    873c:	1806d07a 	srli	r3,r3,1
    8740:	11400136 	bltu	r2,r5,8748 <__umodsi3+0x40>
    8744:	1145c83a 	sub	r2,r2,r5
    8748:	280ad07a 	srli	r5,r5,1
    874c:	183ffb1e 	bne	r3,zero,873c <__umodsi3+0x34>
    8750:	f800283a 	ret
    8754:	2005883a 	mov	r2,r4
    8758:	f800283a 	ret
    875c:	00c00044 	movi	r3,1
    8760:	003ff606 	br	873c <__umodsi3+0x34>

00008764 <srand>:
    8764:	00800074 	movhi	r2,1
    8768:	11256e15 	stw	r4,-27208(r2)
    876c:	00800074 	movhi	r2,1
    8770:	10256f15 	stw	zero,-27204(r2)
    8774:	f800283a 	ret

00008778 <rand>:
    8778:	00800074 	movhi	r2,1
    877c:	11256e17 	ldw	r4,-27208(r2)
    8780:	00800074 	movhi	r2,1
    8784:	11656f17 	ldw	r5,-27204(r2)
    8788:	01932574 	movhi	r6,19605
    878c:	01d614b4 	movhi	r7,22610
    8790:	deffff04 	addi	sp,sp,-4
    8794:	319fcb44 	addi	r6,r6,32557
    8798:	39fd0b44 	addi	r7,r7,-3027
    879c:	dfc00015 	stw	ra,0(sp)
    87a0:	000887c0 	call	887c <__muldi3>
    87a4:	11000044 	addi	r4,r2,1
    87a8:	2085803a 	cmpltu	r2,r4,r2
    87ac:	10c7883a 	add	r3,r2,r3
    87b0:	00800074 	movhi	r2,1
    87b4:	11256e15 	stw	r4,-27208(r2)
    87b8:	00800074 	movhi	r2,1
    87bc:	10e56f15 	stw	r3,-27204(r2)
    87c0:	00a00034 	movhi	r2,32768
    87c4:	10bfffc4 	addi	r2,r2,-1
    87c8:	1884703a 	and	r2,r3,r2
    87cc:	dfc00017 	ldw	ra,0(sp)
    87d0:	dec00104 	addi	sp,sp,4
    87d4:	f800283a 	ret

000087d8 <time>:
    87d8:	defffb04 	addi	sp,sp,-20
    87dc:	00800074 	movhi	r2,1
    87e0:	dc000315 	stw	r16,12(sp)
    87e4:	2021883a 	mov	r16,r4
    87e8:	11252c17 	ldw	r4,-27472(r2)
    87ec:	000d883a 	mov	r6,zero
    87f0:	d80b883a 	mov	r5,sp
    87f4:	dfc00415 	stw	ra,16(sp)
    87f8:	00088300 	call	8830 <_gettimeofday_r>
    87fc:	1000030e 	bge	r2,zero,880c <time+0x34>
    8800:	00bfffc4 	movi	r2,-1
    8804:	d8800015 	stw	r2,0(sp)
    8808:	d8800115 	stw	r2,4(sp)
    880c:	d8800017 	ldw	r2,0(sp)
    8810:	d8c00117 	ldw	r3,4(sp)
    8814:	80000226 	beq	r16,zero,8820 <time+0x48>
    8818:	80800015 	stw	r2,0(r16)
    881c:	80c00115 	stw	r3,4(r16)
    8820:	dfc00417 	ldw	ra,16(sp)
    8824:	dc000317 	ldw	r16,12(sp)
    8828:	dec00504 	addi	sp,sp,20
    882c:	f800283a 	ret

00008830 <_gettimeofday_r>:
    8830:	defffe04 	addi	sp,sp,-8
    8834:	dc000015 	stw	r16,0(sp)
    8838:	00800074 	movhi	r2,1
    883c:	2021883a 	mov	r16,r4
    8840:	2809883a 	mov	r4,r5
    8844:	300b883a 	mov	r5,r6
    8848:	dfc00115 	stw	ra,4(sp)
    884c:	10257015 	stw	zero,-27200(r2)
    8850:	00089a80 	call	89a8 <gettimeofday>
    8854:	10ffffd8 	cmpnei	r3,r2,-1
    8858:	1800041e 	bne	r3,zero,886c <_gettimeofday_r+0x3c>
    885c:	00c00074 	movhi	r3,1
    8860:	18e57017 	ldw	r3,-27200(r3)
    8864:	18000126 	beq	r3,zero,886c <_gettimeofday_r+0x3c>
    8868:	80c00015 	stw	r3,0(r16)
    886c:	dfc00117 	ldw	ra,4(sp)
    8870:	dc000017 	ldw	r16,0(sp)
    8874:	dec00204 	addi	sp,sp,8
    8878:	f800283a 	ret

0000887c <__muldi3>:
    887c:	defff704 	addi	sp,sp,-36
    8880:	dd400515 	stw	r21,20(sp)
    8884:	dd000415 	stw	r20,16(sp)
    8888:	202ad43a 	srli	r21,r4,16
    888c:	253fffcc 	andi	r20,r4,65535
    8890:	dc000015 	stw	r16,0(sp)
    8894:	343fffcc 	andi	r16,r6,65535
    8898:	dcc00315 	stw	r19,12(sp)
    889c:	dc800215 	stw	r18,8(sp)
    88a0:	2027883a 	mov	r19,r4
    88a4:	2825883a 	mov	r18,r5
    88a8:	a009883a 	mov	r4,r20
    88ac:	800b883a 	mov	r5,r16
    88b0:	dfc00815 	stw	ra,32(sp)
    88b4:	ddc00715 	stw	r23,28(sp)
    88b8:	dd800615 	stw	r22,24(sp)
    88bc:	302ed43a 	srli	r23,r6,16
    88c0:	382d883a 	mov	r22,r7
    88c4:	dc400115 	stw	r17,4(sp)
    88c8:	3023883a 	mov	r17,r6
    88cc:	00089800 	call	8980 <__mulsi3>
    88d0:	800b883a 	mov	r5,r16
    88d4:	a809883a 	mov	r4,r21
    88d8:	1021883a 	mov	r16,r2
    88dc:	00089800 	call	8980 <__mulsi3>
    88e0:	a809883a 	mov	r4,r21
    88e4:	b80b883a 	mov	r5,r23
    88e8:	102b883a 	mov	r21,r2
    88ec:	00089800 	call	8980 <__mulsi3>
    88f0:	a009883a 	mov	r4,r20
    88f4:	b80b883a 	mov	r5,r23
    88f8:	1029883a 	mov	r20,r2
    88fc:	00089800 	call	8980 <__mulsi3>
    8900:	8010d43a 	srli	r8,r16,16
    8904:	1545883a 	add	r2,r2,r21
    8908:	4091883a 	add	r8,r8,r2
    890c:	4540022e 	bgeu	r8,r21,8918 <__muldi3+0x9c>
    8910:	00800074 	movhi	r2,1
    8914:	a0a9883a 	add	r20,r20,r2
    8918:	4006d43a 	srli	r3,r8,16
    891c:	4010943a 	slli	r8,r8,16
    8920:	b00b883a 	mov	r5,r22
    8924:	9809883a 	mov	r4,r19
    8928:	843fffcc 	andi	r16,r16,65535
    892c:	1d29883a 	add	r20,r3,r20
    8930:	4421883a 	add	r16,r8,r16
    8934:	00089800 	call	8980 <__mulsi3>
    8938:	900b883a 	mov	r5,r18
    893c:	8809883a 	mov	r4,r17
    8940:	1529883a 	add	r20,r2,r20
    8944:	00089800 	call	8980 <__mulsi3>
    8948:	1007883a 	mov	r3,r2
    894c:	a0c7883a 	add	r3,r20,r3
    8950:	8005883a 	mov	r2,r16
    8954:	dfc00817 	ldw	ra,32(sp)
    8958:	ddc00717 	ldw	r23,28(sp)
    895c:	dd800617 	ldw	r22,24(sp)
    8960:	dd400517 	ldw	r21,20(sp)
    8964:	dd000417 	ldw	r20,16(sp)
    8968:	dcc00317 	ldw	r19,12(sp)
    896c:	dc800217 	ldw	r18,8(sp)
    8970:	dc400117 	ldw	r17,4(sp)
    8974:	dc000017 	ldw	r16,0(sp)
    8978:	dec00904 	addi	sp,sp,36
    897c:	f800283a 	ret

00008980 <__mulsi3>:
    8980:	0005883a 	mov	r2,zero
    8984:	20000726 	beq	r4,zero,89a4 <__mulsi3+0x24>
    8988:	20c0004c 	andi	r3,r4,1
    898c:	2008d07a 	srli	r4,r4,1
    8990:	18000126 	beq	r3,zero,8998 <__mulsi3+0x18>
    8994:	1145883a 	add	r2,r2,r5
    8998:	294b883a 	add	r5,r5,r5
    899c:	203ffa1e 	bne	r4,zero,8988 <__mulsi3+0x8>
    89a0:	f800283a 	ret
    89a4:	f800283a 	ret

000089a8 <gettimeofday>:
 */
 

#if defined (__GNUC__) && (__GNUC__ >= 4)
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)
{
    89a8:	defffb04 	addi	sp,sp,-20
    89ac:	dc800215 	stw	r18,8(sp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    89b0:	d4a04e17 	ldw	r18,-32456(gp)
    89b4:	dcc00315 	stw	r19,12(sp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    89b8:	d4e04d17 	ldw	r19,-32460(gp)
    89bc:	dfc00415 	stw	ra,16(sp)
    89c0:	dc400115 	stw	r17,4(sp)
    89c4:	dc000015 	stw	r16,0(sp)
   * non-zero system clock rate. If the system clock is not running, an error
   * is generated and the contents of "ptimeval" and "ptimezone" are not
   * updated.
   */

  if (tick_rate)
    89c8:	90003a26 	beq	r18,zero,8ab4 <gettimeofday+0x10c>
    89cc:	2021883a 	mov	r16,r4
    89d0:	2823883a 	mov	r17,r5
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    89d4:	9809883a 	mov	r4,r19
    89d8:	900b883a 	mov	r5,r18
    89dc:	00086a40 	call	86a4 <__udivsi3>
    89e0:	d0e04617 	ldw	r3,-32488(gp)
    ptimeval->tv_usec = alt_resettime.tv_usec +
    89e4:	010003f4 	movhi	r4,15
    89e8:	900b883a 	mov	r5,r18
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    89ec:	1885883a 	add	r2,r3,r2
    ptimeval->tv_usec = alt_resettime.tv_usec +
    89f0:	21109004 	addi	r4,r4,16960
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    89f4:	80800015 	stw	r2,0(r16)
    ptimeval->tv_usec = alt_resettime.tv_usec +
    89f8:	00086a40 	call	86a4 <__udivsi3>
    89fc:	980d883a 	mov	r6,r19
    8a00:	000f883a 	mov	r7,zero
    8a04:	1009883a 	mov	r4,r2
    8a08:	000b883a 	mov	r5,zero
    8a0c:	000887c0 	call	887c <__muldi3>
    8a10:	018003f4 	movhi	r6,15
    8a14:	1009883a 	mov	r4,r2
    8a18:	31909004 	addi	r6,r6,16960
    8a1c:	000f883a 	mov	r7,zero
    8a20:	180b883a 	mov	r5,r3
    8a24:	0008d040 	call	8d04 <__umoddi3>
    8a28:	d0e04717 	ldw	r3,-32484(gp)
          break;
      }
      else
      {
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
    8a2c:	010003f4 	movhi	r4,15
    8a30:	21109004 	addi	r4,r4,16960
    ptimeval->tv_usec = alt_resettime.tv_usec +
    8a34:	1885883a 	add	r2,r3,r2
    8a38:	80800115 	stw	r2,4(r16)
    while(ptimeval->tv_usec < 0) {
    8a3c:	80800117 	ldw	r2,4(r16)
    8a40:	10000a0e 	bge	r2,zero,8a6c <gettimeofday+0xc4>
      if (ptimeval->tv_sec <= 0)
    8a44:	80c00017 	ldw	r3,0(r16)
    8a48:	00c00316 	blt	zero,r3,8a58 <gettimeofday+0xb0>
          ptimeval->tv_sec = 0;
    8a4c:	80000015 	stw	zero,0(r16)
          ptimeval->tv_usec = 0;
    8a50:	80000115 	stw	zero,4(r16)
    8a54:	00001106 	br	8a9c <gettimeofday+0xf4>
          ptimeval->tv_sec--;
    8a58:	18ffffc4 	addi	r3,r3,-1
          ptimeval->tv_usec += ALT_US;
    8a5c:	1105883a 	add	r2,r2,r4
          ptimeval->tv_sec--;
    8a60:	80c00015 	stw	r3,0(r16)
          ptimeval->tv_usec += ALT_US;
    8a64:	80800115 	stw	r2,4(r16)
    8a68:	003ff406 	br	8a3c <gettimeofday+0x94>
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
    8a6c:	010003f4 	movhi	r4,15
      ptimeval->tv_sec++;
      ptimeval->tv_usec -= ALT_US;
    8a70:	017ffc74 	movhi	r5,65521
    while(ptimeval->tv_usec >= ALT_US) {
    8a74:	21108fc4 	addi	r4,r4,16959
      ptimeval->tv_usec -= ALT_US;
    8a78:	296f7004 	addi	r5,r5,-16960
    while(ptimeval->tv_usec >= ALT_US) {
    8a7c:	80800117 	ldw	r2,4(r16)
    8a80:	2080060e 	bge	r4,r2,8a9c <gettimeofday+0xf4>
      ptimeval->tv_sec++;
    8a84:	80c00017 	ldw	r3,0(r16)
      ptimeval->tv_usec -= ALT_US;
    8a88:	1145883a 	add	r2,r2,r5
    8a8c:	80800115 	stw	r2,4(r16)
      ptimeval->tv_sec++;
    8a90:	18c00044 	addi	r3,r3,1
    8a94:	80c00015 	stw	r3,0(r16)
    8a98:	003ff806 	br	8a7c <gettimeofday+0xd4>
    }
      
    if (ptimezone)
    8a9c:	88000726 	beq	r17,zero,8abc <gettimeofday+0x114>
    { 
      ptimezone->tz_minuteswest = alt_timezone.tz_minuteswest;
    8aa0:	d0a04817 	ldw	r2,-32480(gp)
    8aa4:	88800015 	stw	r2,0(r17)
      ptimezone->tz_dsttime     = alt_timezone.tz_dsttime;
    8aa8:	d0a04917 	ldw	r2,-32476(gp)
    8aac:	88800115 	stw	r2,4(r17)
    8ab0:	00000206 	br	8abc <gettimeofday+0x114>
    }

    return 0;
  }

  return -ENOTSUP;
    8ab4:	00bfde84 	movi	r2,-134
    8ab8:	00000106 	br	8ac0 <gettimeofday+0x118>
    return 0;
    8abc:	0005883a 	mov	r2,zero
}
    8ac0:	dfc00417 	ldw	ra,16(sp)
    8ac4:	dcc00317 	ldw	r19,12(sp)
    8ac8:	dc800217 	ldw	r18,8(sp)
    8acc:	dc400117 	ldw	r17,4(sp)
    8ad0:	dc000017 	ldw	r16,0(sp)
    8ad4:	dec00504 	addi	sp,sp,20
    8ad8:	f800283a 	ret

00008adc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    8adc:	deffff04 	addi	sp,sp,-4
    8ae0:	01000074 	movhi	r4,1
    8ae4:	01400074 	movhi	r5,1
    8ae8:	dfc00015 	stw	ra,0(sp)
    8aec:	2124f204 	addi	r4,r4,-27704
    8af0:	29653004 	addi	r5,r5,-27456

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    8af4:	2140061e 	bne	r4,r5,8b10 <alt_load+0x34>
    8af8:	01000074 	movhi	r4,1
    8afc:	01400074 	movhi	r5,1
    8b00:	21200804 	addi	r4,r4,-32736
    8b04:	29600804 	addi	r5,r5,-32736
    8b08:	2140121e 	bne	r4,r5,8b54 <alt_load+0x78>
    8b0c:	00000b06 	br	8b3c <alt_load+0x60>
    8b10:	00c00074 	movhi	r3,1
    8b14:	18e53004 	addi	r3,r3,-27456
    8b18:	1907c83a 	sub	r3,r3,r4
    8b1c:	0005883a 	mov	r2,zero
  {
    while( to != end )
    8b20:	10fff526 	beq	r2,r3,8af8 <alt_load+0x1c>
    {
      *to++ = *from++;
    8b24:	114f883a 	add	r7,r2,r5
    8b28:	39c00017 	ldw	r7,0(r7)
    8b2c:	110d883a 	add	r6,r2,r4
    8b30:	10800104 	addi	r2,r2,4
    8b34:	31c00015 	stw	r7,0(r6)
    8b38:	003ff906 	br	8b20 <alt_load+0x44>
    8b3c:	01000074 	movhi	r4,1
    8b40:	01400074 	movhi	r5,1
    8b44:	2124b204 	addi	r4,r4,-27960
    8b48:	2964b204 	addi	r5,r5,-27960
  if (to != from)
    8b4c:	2140101e 	bne	r4,r5,8b90 <alt_load+0xb4>
    8b50:	00000b06 	br	8b80 <alt_load+0xa4>
    8b54:	00c00074 	movhi	r3,1
    8b58:	18e00804 	addi	r3,r3,-32736
    8b5c:	1907c83a 	sub	r3,r3,r4
    8b60:	0005883a 	mov	r2,zero
    while( to != end )
    8b64:	10fff526 	beq	r2,r3,8b3c <alt_load+0x60>
      *to++ = *from++;
    8b68:	114f883a 	add	r7,r2,r5
    8b6c:	39c00017 	ldw	r7,0(r7)
    8b70:	110d883a 	add	r6,r2,r4
    8b74:	10800104 	addi	r2,r2,4
    8b78:	31c00015 	stw	r7,0(r6)
    8b7c:	003ff906 	br	8b64 <alt_load+0x88>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    8b80:	0008cf40 	call	8cf4 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    8b84:	dfc00017 	ldw	ra,0(sp)
    8b88:	dec00104 	addi	sp,sp,4
  alt_icache_flush_all();
    8b8c:	0008cf81 	jmpi	8cf8 <alt_icache_flush_all>
    8b90:	00c00074 	movhi	r3,1
    8b94:	18e4f204 	addi	r3,r3,-27704
    8b98:	1907c83a 	sub	r3,r3,r4
  if (to != from)
    8b9c:	0005883a 	mov	r2,zero
    while( to != end )
    8ba0:	18bff726 	beq	r3,r2,8b80 <alt_load+0xa4>
      *to++ = *from++;
    8ba4:	114f883a 	add	r7,r2,r5
    8ba8:	39c00017 	ldw	r7,0(r7)
    8bac:	110d883a 	add	r6,r2,r4
    8bb0:	10800104 	addi	r2,r2,4
    8bb4:	31c00015 	stw	r7,0(r6)
    8bb8:	003ff906 	br	8ba0 <alt_load+0xc4>

00008bbc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8bbc:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    8bc0:	0009883a 	mov	r4,zero
{
    8bc4:	dfc00015 	stw	ra,0(sp)
  alt_irq_init (NULL);
    8bc8:	0008cd00 	call	8cd0 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    8bcc:	0008cf00 	call	8cf0 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    8bd0:	d1a04a17 	ldw	r6,-32472(gp)
    8bd4:	d1604b17 	ldw	r5,-32468(gp)
    8bd8:	d1204c17 	ldw	r4,-32464(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    8bdc:	dfc00017 	ldw	ra,0(sp)
    8be0:	dec00104 	addi	sp,sp,4
  main (alt_argc, alt_argv, alt_envp);
    8be4:	000840c1 	jmpi	840c <main>

00008be8 <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8be8:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8bec:	00bfff84 	movi	r2,-2
    8bf0:	1884703a 	and	r2,r3,r2
    8bf4:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    8bf8:	21400017 	ldw	r5,0(r4)
    8bfc:	20800117 	ldw	r2,4(r4)
    8c00:	28800115 	stw	r2,4(r5)
  entry->previous->next = entry->next;
    8c04:	11400015 	stw	r5,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    8c08:	21000115 	stw	r4,4(r4)
  entry->next     = entry;
    8c0c:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8c10:	1801703a 	wrctl	status,r3
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  alt_llist_remove (&alarm->llist);
  alt_irq_enable_all (irq_context);
}
    8c14:	f800283a 	ret

00008c18 <alt_tick>:

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    8c18:	d0a04d17 	ldw	r2,-32460(gp)
{
    8c1c:	defffb04 	addi	sp,sp,-20
    8c20:	dc000015 	stw	r16,0(sp)
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    8c24:	d4200217 	ldw	r16,-32760(gp)
  _alt_nticks++;
    8c28:	10800044 	addi	r2,r2,1
{
    8c2c:	dc800215 	stw	r18,8(sp)
    8c30:	dc400115 	stw	r17,4(sp)
    8c34:	dfc00415 	stw	ra,16(sp)
    8c38:	dcc00315 	stw	r19,12(sp)
  _alt_nticks++;
    8c3c:	d0a04d15 	stw	r2,-32460(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    8c40:	d4600204 	addi	r17,gp,-32760
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
        {
          alarm->rollover = 1;
    8c44:	04800044 	movi	r18,1
  while (alarm != (alt_alarm*) &alt_alarm_list)
    8c48:	8440071e 	bne	r16,r17,8c68 <alt_tick+0x50>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    8c4c:	dfc00417 	ldw	ra,16(sp)
    8c50:	dcc00317 	ldw	r19,12(sp)
    8c54:	dc800217 	ldw	r18,8(sp)
    8c58:	dc400117 	ldw	r17,4(sp)
    8c5c:	dc000017 	ldw	r16,0(sp)
    8c60:	dec00504 	addi	sp,sp,20
    8c64:	f800283a 	ret
    if ((alarm->rollover) && (_alt_nticks == 0))
    8c68:	80800403 	ldbu	r2,16(r16)
    next = (alt_alarm*) alarm->llist.next;
    8c6c:	84c00017 	ldw	r19,0(r16)
    if ((alarm->rollover) && (_alt_nticks == 0))
    8c70:	10000326 	beq	r2,zero,8c80 <alt_tick+0x68>
    8c74:	d0a04d17 	ldw	r2,-32460(gp)
    8c78:	1000011e 	bne	r2,zero,8c80 <alt_tick+0x68>
      alarm->rollover = 0;
    8c7c:	80000405 	stb	zero,16(r16)
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    8c80:	d0e04d17 	ldw	r3,-32460(gp)
    8c84:	80800217 	ldw	r2,8(r16)
    8c88:	18800836 	bltu	r3,r2,8cac <alt_tick+0x94>
    8c8c:	80800403 	ldbu	r2,16(r16)
    8c90:	1000061e 	bne	r2,zero,8cac <alt_tick+0x94>
      next_callback = alarm->callback (alarm->context);
    8c94:	80800317 	ldw	r2,12(r16)
    8c98:	81000517 	ldw	r4,20(r16)
    8c9c:	103ee83a 	callr	r2
      if (next_callback == 0)
    8ca0:	1000041e 	bne	r2,zero,8cb4 <alt_tick+0x9c>
        alt_alarm_stop (alarm);
    8ca4:	8009883a 	mov	r4,r16
    8ca8:	0008be80 	call	8be8 <alt_alarm_stop>
{
    8cac:	9821883a 	mov	r16,r19
    8cb0:	003fe506 	br	8c48 <alt_tick+0x30>
        alarm->time += next_callback;
    8cb4:	80c00217 	ldw	r3,8(r16)
    8cb8:	10c5883a 	add	r2,r2,r3
        if(alarm->time < _alt_nticks)
    8cbc:	d0e04d17 	ldw	r3,-32460(gp)
        alarm->time += next_callback;
    8cc0:	80800215 	stw	r2,8(r16)
        if(alarm->time < _alt_nticks)
    8cc4:	10fff92e 	bgeu	r2,r3,8cac <alt_tick+0x94>
          alarm->rollover = 1;
    8cc8:	84800405 	stb	r18,16(r16)
    8ccc:	003ff706 	br	8cac <alt_tick+0x94>

00008cd0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    8cd0:	deffff04 	addi	sp,sp,-4
    8cd4:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    8cd8:	0008cfc0 	call	8cfc <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    8cdc:	00800044 	movi	r2,1
    8ce0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    8ce4:	dfc00017 	ldw	ra,0(sp)
    8ce8:	dec00104 	addi	sp,sp,4
    8cec:	f800283a 	ret

00008cf0 <alt_sys_init>:

void alt_sys_init( void )
{
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
}
    8cf0:	f800283a 	ret

00008cf4 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    8cf4:	f800283a 	ret

00008cf8 <alt_icache_flush_all>:
void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    8cf8:	f800283a 	ret

00008cfc <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    8cfc:	000170fa 	wrctl	ienable,zero
}
    8d00:	f800283a 	ret

00008d04 <__umoddi3>:
    8d04:	defff304 	addi	sp,sp,-52
    8d08:	dc400415 	stw	r17,16(sp)
    8d0c:	dc000315 	stw	r16,12(sp)
    8d10:	dfc00c15 	stw	ra,48(sp)
    8d14:	df000b15 	stw	fp,44(sp)
    8d18:	ddc00a15 	stw	r23,40(sp)
    8d1c:	dd800915 	stw	r22,36(sp)
    8d20:	dd400815 	stw	r21,32(sp)
    8d24:	dd000715 	stw	r20,28(sp)
    8d28:	dcc00615 	stw	r19,24(sp)
    8d2c:	dc800515 	stw	r18,20(sp)
    8d30:	2823883a 	mov	r17,r5
    8d34:	2021883a 	mov	r16,r4
    8d38:	38003b1e 	bne	r7,zero,8e28 <__umoddi3+0x124>
    8d3c:	3825883a 	mov	r18,r7
    8d40:	3029883a 	mov	r20,r6
    8d44:	2027883a 	mov	r19,r4
    8d48:	29805b2e 	bgeu	r5,r6,8eb8 <__umoddi3+0x1b4>
    8d4c:	00bfffd4 	movui	r2,65535
    8d50:	282d883a 	mov	r22,r5
    8d54:	11809a2e 	bgeu	r2,r6,8fc0 <__umoddi3+0x2bc>
    8d58:	00804034 	movhi	r2,256
    8d5c:	30814436 	bltu	r6,r2,9270 <__umoddi3+0x56c>
    8d60:	3006d63a 	srli	r3,r6,24
    8d64:	04800604 	movi	r18,24
    8d68:	00800074 	movhi	r2,1
    8d6c:	1885883a 	add	r2,r3,r2
    8d70:	1124b203 	ldbu	r4,-27960(r2)
    8d74:	00800804 	movi	r2,32
    8d78:	2489883a 	add	r4,r4,r18
    8d7c:	1125c83a 	sub	r18,r2,r4
    8d80:	11000526 	beq	r2,r4,8d98 <__umoddi3+0x94>
    8d84:	8ca2983a 	sll	r17,r17,r18
    8d88:	8108d83a 	srl	r4,r16,r4
    8d8c:	34a8983a 	sll	r20,r6,r18
    8d90:	84a6983a 	sll	r19,r16,r18
    8d94:	246cb03a 	or	r22,r4,r17
    8d98:	a02ed43a 	srli	r23,r20,16
    8d9c:	b009883a 	mov	r4,r22
    8da0:	a57fffcc 	andi	r21,r20,65535
    8da4:	b80b883a 	mov	r5,r23
    8da8:	00087080 	call	8708 <__umodsi3>
    8dac:	b80b883a 	mov	r5,r23
    8db0:	b009883a 	mov	r4,r22
    8db4:	1023883a 	mov	r17,r2
    8db8:	00086a40 	call	86a4 <__udivsi3>
    8dbc:	a809883a 	mov	r4,r21
    8dc0:	100b883a 	mov	r5,r2
    8dc4:	00089800 	call	8980 <__mulsi3>
    8dc8:	8822943a 	slli	r17,r17,16
    8dcc:	9808d43a 	srli	r4,r19,16
    8dd0:	8908b03a 	or	r4,r17,r4
    8dd4:	2080042e 	bgeu	r4,r2,8de8 <__umoddi3+0xe4>
    8dd8:	2509883a 	add	r4,r4,r20
    8ddc:	25000236 	bltu	r4,r20,8de8 <__umoddi3+0xe4>
    8de0:	2080012e 	bgeu	r4,r2,8de8 <__umoddi3+0xe4>
    8de4:	2509883a 	add	r4,r4,r20
    8de8:	20a1c83a 	sub	r16,r4,r2
    8dec:	b80b883a 	mov	r5,r23
    8df0:	8009883a 	mov	r4,r16
    8df4:	00087080 	call	8708 <__umodsi3>
    8df8:	b80b883a 	mov	r5,r23
    8dfc:	8009883a 	mov	r4,r16
    8e00:	1023883a 	mov	r17,r2
    8e04:	00086a40 	call	86a4 <__udivsi3>
    8e08:	8822943a 	slli	r17,r17,16
    8e0c:	100b883a 	mov	r5,r2
    8e10:	a809883a 	mov	r4,r21
    8e14:	00089800 	call	8980 <__mulsi3>
    8e18:	98ffffcc 	andi	r3,r19,65535
    8e1c:	88c6b03a 	or	r3,r17,r3
    8e20:	18805e2e 	bgeu	r3,r2,8f9c <__umoddi3+0x298>
    8e24:	00005906 	br	8f8c <__umoddi3+0x288>
    8e28:	2005883a 	mov	r2,r4
    8e2c:	29c00d2e 	bgeu	r5,r7,8e64 <__umoddi3+0x160>
    8e30:	2807883a 	mov	r3,r5
    8e34:	dfc00c17 	ldw	ra,48(sp)
    8e38:	df000b17 	ldw	fp,44(sp)
    8e3c:	ddc00a17 	ldw	r23,40(sp)
    8e40:	dd800917 	ldw	r22,36(sp)
    8e44:	dd400817 	ldw	r21,32(sp)
    8e48:	dd000717 	ldw	r20,28(sp)
    8e4c:	dcc00617 	ldw	r19,24(sp)
    8e50:	dc800517 	ldw	r18,20(sp)
    8e54:	dc400417 	ldw	r17,16(sp)
    8e58:	dc000317 	ldw	r16,12(sp)
    8e5c:	dec00d04 	addi	sp,sp,52
    8e60:	f800283a 	ret
    8e64:	013fffd4 	movui	r4,65535
    8e68:	2807883a 	mov	r3,r5
    8e6c:	21c0592e 	bgeu	r4,r7,8fd4 <__umoddi3+0x2d0>
    8e70:	01004034 	movhi	r4,256
    8e74:	39010336 	bltu	r7,r4,9284 <__umoddi3+0x580>
    8e78:	3808d63a 	srli	r4,r7,24
    8e7c:	02000604 	movi	r8,24
    8e80:	01400074 	movhi	r5,1
    8e84:	214b883a 	add	r5,r4,r5
    8e88:	2d24b203 	ldbu	r20,-27960(r5)
    8e8c:	01000804 	movi	r4,32
    8e90:	a229883a 	add	r20,r20,r8
    8e94:	252bc83a 	sub	r21,r4,r20
    8e98:	2500531e 	bne	r4,r20,8fe8 <__umoddi3+0x2e4>
    8e9c:	3c400136 	bltu	r7,r17,8ea4 <__umoddi3+0x1a0>
    8ea0:	81bfe436 	bltu	r16,r6,8e34 <__umoddi3+0x130>
    8ea4:	8185c83a 	sub	r2,r16,r6
    8ea8:	89cfc83a 	sub	r7,r17,r7
    8eac:	8087803a 	cmpltu	r3,r16,r2
    8eb0:	38c7c83a 	sub	r3,r7,r3
    8eb4:	003fdf06 	br	8e34 <__umoddi3+0x130>
    8eb8:	3000041e 	bne	r6,zero,8ecc <__umoddi3+0x1c8>
    8ebc:	000b883a 	mov	r5,zero
    8ec0:	01000044 	movi	r4,1
    8ec4:	00086a40 	call	86a4 <__udivsi3>
    8ec8:	1029883a 	mov	r20,r2
    8ecc:	00bfffd4 	movui	r2,65535
    8ed0:	1500362e 	bgeu	r2,r20,8fac <__umoddi3+0x2a8>
    8ed4:	00804034 	movhi	r2,256
    8ed8:	a080ed36 	bltu	r20,r2,9290 <__umoddi3+0x58c>
    8edc:	a006d63a 	srli	r3,r20,24
    8ee0:	04800604 	movi	r18,24
    8ee4:	00800074 	movhi	r2,1
    8ee8:	1885883a 	add	r2,r3,r2
    8eec:	15a4b203 	ldbu	r22,-27960(r2)
    8ef0:	00800804 	movi	r2,32
    8ef4:	b4ad883a 	add	r22,r22,r18
    8ef8:	15a5c83a 	sub	r18,r2,r22
    8efc:	1580a51e 	bne	r2,r22,9194 <__umoddi3+0x490>
    8f00:	a02ed43a 	srli	r23,r20,16
    8f04:	8d23c83a 	sub	r17,r17,r20
    8f08:	a57fffcc 	andi	r21,r20,65535
    8f0c:	8809883a 	mov	r4,r17
    8f10:	b80b883a 	mov	r5,r23
    8f14:	00087080 	call	8708 <__umodsi3>
    8f18:	8809883a 	mov	r4,r17
    8f1c:	b80b883a 	mov	r5,r23
    8f20:	1023883a 	mov	r17,r2
    8f24:	00086a40 	call	86a4 <__udivsi3>
    8f28:	1009883a 	mov	r4,r2
    8f2c:	a80b883a 	mov	r5,r21
    8f30:	00089800 	call	8980 <__mulsi3>
    8f34:	8822943a 	slli	r17,r17,16
    8f38:	9808d43a 	srli	r4,r19,16
    8f3c:	8908b03a 	or	r4,r17,r4
    8f40:	2080032e 	bgeu	r4,r2,8f50 <__umoddi3+0x24c>
    8f44:	2509883a 	add	r4,r4,r20
    8f48:	25000136 	bltu	r4,r20,8f50 <__umoddi3+0x24c>
    8f4c:	2080dc36 	bltu	r4,r2,92c0 <__umoddi3+0x5bc>
    8f50:	20a1c83a 	sub	r16,r4,r2
    8f54:	b80b883a 	mov	r5,r23
    8f58:	8009883a 	mov	r4,r16
    8f5c:	00087080 	call	8708 <__umodsi3>
    8f60:	b80b883a 	mov	r5,r23
    8f64:	8009883a 	mov	r4,r16
    8f68:	1023883a 	mov	r17,r2
    8f6c:	8822943a 	slli	r17,r17,16
    8f70:	00086a40 	call	86a4 <__udivsi3>
    8f74:	a80b883a 	mov	r5,r21
    8f78:	1009883a 	mov	r4,r2
    8f7c:	00089800 	call	8980 <__mulsi3>
    8f80:	9cffffcc 	andi	r19,r19,65535
    8f84:	8cc6b03a 	or	r3,r17,r19
    8f88:	1880042e 	bgeu	r3,r2,8f9c <__umoddi3+0x298>
    8f8c:	1d07883a 	add	r3,r3,r20
    8f90:	1d000236 	bltu	r3,r20,8f9c <__umoddi3+0x298>
    8f94:	1880012e 	bgeu	r3,r2,8f9c <__umoddi3+0x298>
    8f98:	1d07883a 	add	r3,r3,r20
    8f9c:	1885c83a 	sub	r2,r3,r2
    8fa0:	1484d83a 	srl	r2,r2,r18
    8fa4:	0007883a 	mov	r3,zero
    8fa8:	003fa206 	br	8e34 <__umoddi3+0x130>
    8fac:	a0804030 	cmpltui	r2,r20,256
    8fb0:	1000ba1e 	bne	r2,zero,929c <__umoddi3+0x598>
    8fb4:	a006d23a 	srli	r3,r20,8
    8fb8:	04800204 	movi	r18,8
    8fbc:	003fc906 	br	8ee4 <__umoddi3+0x1e0>
    8fc0:	30804030 	cmpltui	r2,r6,256
    8fc4:	1000ad1e 	bne	r2,zero,927c <__umoddi3+0x578>
    8fc8:	3006d23a 	srli	r3,r6,8
    8fcc:	04800204 	movi	r18,8
    8fd0:	003f6506 	br	8d68 <__umoddi3+0x64>
    8fd4:	39004030 	cmpltui	r4,r7,256
    8fd8:	2000b21e 	bne	r4,zero,92a4 <__umoddi3+0x5a0>
    8fdc:	3808d23a 	srli	r4,r7,8
    8fe0:	02000204 	movi	r8,8
    8fe4:	003fa606 	br	8e80 <__umoddi3+0x17c>
    8fe8:	3d4e983a 	sll	r7,r7,r21
    8fec:	3508d83a 	srl	r4,r6,r20
    8ff0:	8d2cd83a 	srl	r22,r17,r20
    8ff4:	8504d83a 	srl	r2,r16,r20
    8ff8:	21e4b03a 	or	r18,r4,r7
    8ffc:	8d62983a 	sll	r17,r17,r21
    9000:	9026d43a 	srli	r19,r18,16
    9004:	354c983a 	sll	r6,r6,r21
    9008:	1444b03a 	or	r2,r2,r17
    900c:	b009883a 	mov	r4,r22
    9010:	980b883a 	mov	r5,r19
    9014:	d9800115 	stw	r6,4(sp)
    9018:	d8800015 	stw	r2,0(sp)
    901c:	00087080 	call	8708 <__umodsi3>
    9020:	980b883a 	mov	r5,r19
    9024:	b009883a 	mov	r4,r22
    9028:	102f883a 	mov	r23,r2
    902c:	947fffcc 	andi	r17,r18,65535
    9030:	00086a40 	call	86a4 <__udivsi3>
    9034:	8809883a 	mov	r4,r17
    9038:	100b883a 	mov	r5,r2
    903c:	1039883a 	mov	fp,r2
    9040:	00089800 	call	8980 <__mulsi3>
    9044:	d8c00017 	ldw	r3,0(sp)
    9048:	b82e943a 	slli	r23,r23,16
    904c:	8560983a 	sll	r16,r16,r21
    9050:	1808d43a 	srli	r4,r3,16
    9054:	b908b03a 	or	r4,r23,r4
    9058:	2080062e 	bgeu	r4,r2,9074 <__umoddi3+0x370>
    905c:	2489883a 	add	r4,r4,r18
    9060:	e17fffc4 	addi	r5,fp,-1
    9064:	24809436 	bltu	r4,r18,92b8 <__umoddi3+0x5b4>
    9068:	2080932e 	bgeu	r4,r2,92b8 <__umoddi3+0x5b4>
    906c:	e73fff84 	addi	fp,fp,-2
    9070:	2489883a 	add	r4,r4,r18
    9074:	20adc83a 	sub	r22,r4,r2
    9078:	980b883a 	mov	r5,r19
    907c:	b009883a 	mov	r4,r22
    9080:	00087080 	call	8708 <__umodsi3>
    9084:	980b883a 	mov	r5,r19
    9088:	b009883a 	mov	r4,r22
    908c:	102f883a 	mov	r23,r2
    9090:	00086a40 	call	86a4 <__udivsi3>
    9094:	100b883a 	mov	r5,r2
    9098:	8809883a 	mov	r4,r17
    909c:	d8800215 	stw	r2,8(sp)
    90a0:	00089800 	call	8980 <__mulsi3>
    90a4:	d8c00017 	ldw	r3,0(sp)
    90a8:	b82e943a 	slli	r23,r23,16
    90ac:	d9400217 	ldw	r5,8(sp)
    90b0:	1c7fffcc 	andi	r17,r3,65535
    90b4:	bc62b03a 	or	r17,r23,r17
    90b8:	8880062e 	bgeu	r17,r2,90d4 <__umoddi3+0x3d0>
    90bc:	8ca3883a 	add	r17,r17,r18
    90c0:	28ffffc4 	addi	r3,r5,-1
    90c4:	8c807a36 	bltu	r17,r18,92b0 <__umoddi3+0x5ac>
    90c8:	8880792e 	bgeu	r17,r2,92b0 <__umoddi3+0x5ac>
    90cc:	297fff84 	addi	r5,r5,-2
    90d0:	8ca3883a 	add	r17,r17,r18
    90d4:	e02c943a 	slli	r22,fp,16
    90d8:	d9c00117 	ldw	r7,4(sp)
    90dc:	29bfffcc 	andi	r6,r5,65535
    90e0:	b16cb03a 	or	r22,r22,r5
    90e4:	38ffffcc 	andi	r3,r7,65535
    90e8:	b02cd43a 	srli	r22,r22,16
    90ec:	180b883a 	mov	r5,r3
    90f0:	3009883a 	mov	r4,r6
    90f4:	3838d43a 	srli	fp,r7,16
    90f8:	182f883a 	mov	r23,r3
    90fc:	d9800015 	stw	r6,0(sp)
    9100:	88a3c83a 	sub	r17,r17,r2
    9104:	00089800 	call	8980 <__mulsi3>
    9108:	b80b883a 	mov	r5,r23
    910c:	b009883a 	mov	r4,r22
    9110:	102f883a 	mov	r23,r2
    9114:	00089800 	call	8980 <__mulsi3>
    9118:	e00b883a 	mov	r5,fp
    911c:	b009883a 	mov	r4,r22
    9120:	102d883a 	mov	r22,r2
    9124:	00089800 	call	8980 <__mulsi3>
    9128:	d9800017 	ldw	r6,0(sp)
    912c:	e00b883a 	mov	r5,fp
    9130:	1039883a 	mov	fp,r2
    9134:	3009883a 	mov	r4,r6
    9138:	00089800 	call	8980 <__mulsi3>
    913c:	b808d43a 	srli	r4,r23,16
    9140:	1585883a 	add	r2,r2,r22
    9144:	2089883a 	add	r4,r4,r2
    9148:	2580022e 	bgeu	r4,r22,9154 <__umoddi3+0x450>
    914c:	00800074 	movhi	r2,1
    9150:	e0b9883a 	add	fp,fp,r2
    9154:	2006d43a 	srli	r3,r4,16
    9158:	2008943a 	slli	r4,r4,16
    915c:	bdffffcc 	andi	r23,r23,65535
    9160:	1f07883a 	add	r3,r3,fp
    9164:	25c9883a 	add	r4,r4,r23
    9168:	88c03a36 	bltu	r17,r3,9254 <__umoddi3+0x550>
    916c:	88c03826 	beq	r17,r3,9250 <__umoddi3+0x54c>
    9170:	8109c83a 	sub	r4,r16,r4
    9174:	8121803a 	cmpltu	r16,r16,r4
    9178:	88c7c83a 	sub	r3,r17,r3
    917c:	1c07c83a 	sub	r3,r3,r16
    9180:	1d04983a 	sll	r2,r3,r20
    9184:	2548d83a 	srl	r4,r4,r21
    9188:	1d46d83a 	srl	r3,r3,r21
    918c:	1104b03a 	or	r2,r2,r4
    9190:	003f2806 	br	8e34 <__umoddi3+0x130>
    9194:	a4a8983a 	sll	r20,r20,r18
    9198:	8da6d83a 	srl	r19,r17,r22
    919c:	8ca2983a 	sll	r17,r17,r18
    91a0:	a02ed43a 	srli	r23,r20,16
    91a4:	9809883a 	mov	r4,r19
    91a8:	85acd83a 	srl	r22,r16,r22
    91ac:	b80b883a 	mov	r5,r23
    91b0:	00087080 	call	8708 <__umodsi3>
    91b4:	9809883a 	mov	r4,r19
    91b8:	b80b883a 	mov	r5,r23
    91bc:	b46cb03a 	or	r22,r22,r17
    91c0:	a57fffcc 	andi	r21,r20,65535
    91c4:	1023883a 	mov	r17,r2
    91c8:	00086a40 	call	86a4 <__udivsi3>
    91cc:	a809883a 	mov	r4,r21
    91d0:	100b883a 	mov	r5,r2
    91d4:	00089800 	call	8980 <__mulsi3>
    91d8:	8822943a 	slli	r17,r17,16
    91dc:	b008d43a 	srli	r4,r22,16
    91e0:	84a6983a 	sll	r19,r16,r18
    91e4:	8908b03a 	or	r4,r17,r4
    91e8:	2080042e 	bgeu	r4,r2,91fc <__umoddi3+0x4f8>
    91ec:	2509883a 	add	r4,r4,r20
    91f0:	25000236 	bltu	r4,r20,91fc <__umoddi3+0x4f8>
    91f4:	2080012e 	bgeu	r4,r2,91fc <__umoddi3+0x4f8>
    91f8:	2509883a 	add	r4,r4,r20
    91fc:	20a1c83a 	sub	r16,r4,r2
    9200:	8009883a 	mov	r4,r16
    9204:	b80b883a 	mov	r5,r23
    9208:	00087080 	call	8708 <__umodsi3>
    920c:	8009883a 	mov	r4,r16
    9210:	1021883a 	mov	r16,r2
    9214:	b80b883a 	mov	r5,r23
    9218:	8020943a 	slli	r16,r16,16
    921c:	00086a40 	call	86a4 <__udivsi3>
    9220:	100b883a 	mov	r5,r2
    9224:	a809883a 	mov	r4,r21
    9228:	b47fffcc 	andi	r17,r22,65535
    922c:	00089800 	call	8980 <__mulsi3>
    9230:	8462b03a 	or	r17,r16,r17
    9234:	8880042e 	bgeu	r17,r2,9248 <__umoddi3+0x544>
    9238:	8d23883a 	add	r17,r17,r20
    923c:	8d000236 	bltu	r17,r20,9248 <__umoddi3+0x544>
    9240:	8880012e 	bgeu	r17,r2,9248 <__umoddi3+0x544>
    9244:	8d23883a 	add	r17,r17,r20
    9248:	88a3c83a 	sub	r17,r17,r2
    924c:	003f2f06 	br	8f0c <__umoddi3+0x208>
    9250:	813fc72e 	bgeu	r16,r4,9170 <__umoddi3+0x46c>
    9254:	d8800117 	ldw	r2,4(sp)
    9258:	20a7c83a 	sub	r19,r4,r2
    925c:	24c9803a 	cmpltu	r4,r4,r19
    9260:	2489883a 	add	r4,r4,r18
    9264:	1907c83a 	sub	r3,r3,r4
    9268:	9809883a 	mov	r4,r19
    926c:	003fc006 	br	9170 <__umoddi3+0x46c>
    9270:	3006d43a 	srli	r3,r6,16
    9274:	04800404 	movi	r18,16
    9278:	003ebb06 	br	8d68 <__umoddi3+0x64>
    927c:	3007883a 	mov	r3,r6
    9280:	003eb906 	br	8d68 <__umoddi3+0x64>
    9284:	3808d43a 	srli	r4,r7,16
    9288:	02000404 	movi	r8,16
    928c:	003efc06 	br	8e80 <__umoddi3+0x17c>
    9290:	a006d43a 	srli	r3,r20,16
    9294:	04800404 	movi	r18,16
    9298:	003f1206 	br	8ee4 <__umoddi3+0x1e0>
    929c:	a007883a 	mov	r3,r20
    92a0:	003f1006 	br	8ee4 <__umoddi3+0x1e0>
    92a4:	3809883a 	mov	r4,r7
    92a8:	0011883a 	mov	r8,zero
    92ac:	003ef406 	br	8e80 <__umoddi3+0x17c>
    92b0:	180b883a 	mov	r5,r3
    92b4:	003f8706 	br	90d4 <__umoddi3+0x3d0>
    92b8:	2839883a 	mov	fp,r5
    92bc:	003f6d06 	br	9074 <__umoddi3+0x370>
    92c0:	2509883a 	add	r4,r4,r20
    92c4:	003f2206 	br	8f50 <__umoddi3+0x24c>
