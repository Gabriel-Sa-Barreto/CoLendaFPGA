
CollendaCode.elf:     file format elf32-littlenios2
CollendaCode.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008020

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00000570 memsz 0x00000570 flags r-x
    LOAD off    0x00001590 vaddr 0x00008590 paddr 0x00008594 align 2**12
         filesz 0x00000004 memsz 0x00000004 flags rw-
    LOAD off    0x00001598 vaddr 0x00008598 paddr 0x00008598 align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00008020  00008020  00001594  2**0
                  CONTENTS
  2 .text         00000560  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000010  00008580  00008580  00001580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000004  00008590  00008594  00001590  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000000c  00008598  00008598  00001598  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  000085a4  000085a4  00001594  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00001594  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000001e8  00000000  00000000  000015b8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000109f  00000000  00000000  000017a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000008fb  00000000  00000000  0000283f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00000aeb  00000000  00000000  0000313a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000025c  00000000  00000000  00003c28  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000080c  00000000  00000000  00003e84  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000709  00000000  00000000  00004690  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00004d9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000000e8  00000000  00000000  00004de0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00005ddd  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00005de0  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00005dec  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00005ded  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00005dee  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00005df2  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00005df6  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  00005dfa  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  00005e05  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  00005e10  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000008  00000000  00000000  00005e1b  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000033  00000000  00000000  00005e23  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     00049da7  00000000  00000000  00005e56  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
00008020 l    d  .text	00000000 .text
00008580 l    d  .rodata	00000000 .rodata
00008590 l    d  .rwdata	00000000 .rwdata
00008598 l    d  .bss	00000000 .bss
000085a4 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../CollendaCode_bsp//obj/HAL/src/crt0.o
00008058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00008230 g     F .text	0000002c alt_main
00008594 g       *ABS*	00000000 __flash_rwdata_start
0000825c g     F .text	00000038 alt_putstr
00008380 g     F .text	00000008 altera_nios2_gen2_irq_init
00008000 g     F .entry	0000000c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
0000859c g     O .bss	00000004 alt_argv
00010590 g       *ABS*	00000000 _gp
00008294 g     F .text	00000004 usleep
00008000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0000849c g     F .text	00000064 .hidden __udivsi3
000085a4 g       *ABS*	00000000 __bss_end
00008378 g     F .text	00000004 alt_dcache_flush_all
00008594 g       *ABS*	00000000 __ram_rwdata_end
00008590 g       *ABS*	00000000 __ram_rodata_end
00008590 g     O .rwdata	00000004 jtag_uart_0
00008500 g     F .text	00000058 .hidden __umodsi3
000085a4 g       *ABS*	00000000 end
0000d320 g       *ABS*	00000000 __alt_stack_pointer
000082bc g     F .text	00000034 altera_avalon_jtag_uart_write
00008020 g     F .text	0000003c _start
000082b8 g     F .text	00000004 alt_sys_init
00008558 g     F .text	00000028 .hidden __mulsi3
00008590 g       *ABS*	00000000 __ram_rwdata_start
00008580 g       *ABS*	00000000 __ram_rodata_start
000082f0 g     F .text	00000088 alt_busy_sleep
000085a4 g       *ABS*	00000000 __alt_stack_base
00008598 g       *ABS*	00000000 __bss_start
0000805c g     F .text	000000f4 main
00008598 g     O .bss	00000004 alt_envp
000083a4 g     F .text	00000084 .hidden __divsi3
00008580 g       *ABS*	00000000 __flash_rodata_start
00008298 g     F .text	00000020 alt_irq_init
000085a0 g     O .bss	00000004 alt_argc
00008020 g       *ABS*	00000000 __ram_exceptions_start
00008594 g       *ABS*	00000000 _edata
000085a4 g       *ABS*	00000000 _end
00008020 g       *ABS*	00000000 __ram_exceptions_end
00008428 g     F .text	00000074 .hidden __modsi3
0000d320 g       *ABS*	00000000 __alt_data_end
0000800c g       .entry	00000000 _exit
00008388 g     F .text	0000001c strlen
0000837c g     F .text	00000004 alt_icache_flush_all
00008150 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08600814 	ori	at,at,32800
    jmp r1
    8008:	0800683a 	jmp	at

0000800c <_exit>:
	...

Disassembly of section .text:

00008020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    8024:	def4c814 	ori	sp,sp,54048
    movhi gp, %hi(_gp)
    8028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    802c:	d6816414 	ori	gp,gp,1424
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8034:	10a16614 	ori	r2,r2,34200

    movhi r3, %hi(__bss_end)
    8038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    803c:	18e16914 	ori	r3,r3,34212

    beq r2, r3, 1f
    8040:	10c00326 	beq	r2,r3,8050 <_start+0x30>

0:
    stw zero, (r2)
    8044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    804c:	10fffd36 	bltu	r2,r3,8044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8050:	00081500 	call	8150 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8054:	00082300 	call	8230 <alt_main>

00008058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8058:	003fff06 	br	8058 <alt_after_alt_main>

0000805c <main>:

#define OPCODE 0x3fff1  //Opcode of the instruction to written in memory.
#define CHECK_PRINT_BASE 0x11050
#define SWITCHCOR_BASE 0x11030

int main(){
    805c:	defffa04 	addi	sp,sp,-24
	alt_putstr("It's Working!!");
    8060:	01000074 	movhi	r4,1

#define OPCODE 0x3fff1  //Opcode of the instruction to written in memory.
#define CHECK_PRINT_BASE 0x11050
#define SWITCHCOR_BASE 0x11030

int main(){
    8064:	dcc00315 	stw	r19,12(sp)
    8068:	dc400115 	stw	r17,4(sp)
    806c:	dc000015 	stw	r16,0(sp)
	alt_putstr("It's Working!!");
    8070:	21216004 	addi	r4,r4,-31360
	//Example:
		//Parameter A: 111111111111110001 == 3fff1
		//Parameter B: 000111000  - Green
	int escolha = 0;
	while(1){
		escolha = IORD(SWITCHCOR_BASE,0);
    8074:	04c00074 	movhi	r19,1
		}else if(escolha == 5){
			if(IORD(CHECK_PRINT_BASE,0) == 0){ //The screen doesn't been drawn.
				ALT_CI_VIDEO_PROCESSOR_0(0x3fff1, 0x10);
			}
		}else if(escolha == 6){
			if(IORD(CHECK_PRINT_BASE,0) == 0){ //The screen doesn't been drawn.
    8078:	04400074 	movhi	r17,1
				ALT_CI_VIDEO_PROCESSOR_0(0x3fff1, 0x78);
    807c:	04000134 	movhi	r16,4

#define OPCODE 0x3fff1  //Opcode of the instruction to written in memory.
#define CHECK_PRINT_BASE 0x11050
#define SWITCHCOR_BASE 0x11030

int main(){
    8080:	dd000415 	stw	r20,16(sp)
    8084:	dfc00515 	stw	ra,20(sp)
    8088:	dc800215 	stw	r18,8(sp)
	//Example:
		//Parameter A: 111111111111110001 == 3fff1
		//Parameter B: 000111000  - Green
	int escolha = 0;
	while(1){
		escolha = IORD(SWITCHCOR_BASE,0);
    808c:	9cc40c04 	addi	r19,r19,4144
#define OPCODE 0x3fff1  //Opcode of the instruction to written in memory.
#define CHECK_PRINT_BASE 0x11050
#define SWITCHCOR_BASE 0x11030

int main(){
	alt_putstr("It's Working!!");
    8090:	000825c0 	call	825c <alt_putstr>
		usleep(10000);
		if(escolha == 0){
			if(IORD(CHECK_PRINT_BASE,0) == 0){ //The screen doesn't been drawn.
				ALT_CI_VIDEO_PROCESSOR_0(0x3fff1, 0x12);
			}
		}else if(escolha == 1){
    8094:	05000044 	movi	r20,1
		}else if(escolha == 5){
			if(IORD(CHECK_PRINT_BASE,0) == 0){ //The screen doesn't been drawn.
				ALT_CI_VIDEO_PROCESSOR_0(0x3fff1, 0x10);
			}
		}else if(escolha == 6){
			if(IORD(CHECK_PRINT_BASE,0) == 0){ //The screen doesn't been drawn.
    8098:	8c441404 	addi	r17,r17,4176
				ALT_CI_VIDEO_PROCESSOR_0(0x3fff1, 0x78);
    809c:	843ffc44 	addi	r16,r16,-15
	//Example:
		//Parameter A: 111111111111110001 == 3fff1
		//Parameter B: 000111000  - Green
	int escolha = 0;
	while(1){
		escolha = IORD(SWITCHCOR_BASE,0);
    80a0:	9c800037 	ldwio	r18,0(r19)
		usleep(10000);
    80a4:	0109c404 	movi	r4,10000
    80a8:	00082940 	call	8294 <usleep>
		if(escolha == 0){
    80ac:	9000041e 	bne	r18,zero,80c0 <main+0x64>
			if(IORD(CHECK_PRINT_BASE,0) == 0){ //The screen doesn't been drawn.
    80b0:	88800037 	ldwio	r2,0(r17)
    80b4:	103ffa1e 	bne	r2,zero,80a0 <main+0x44>
				ALT_CI_VIDEO_PROCESSOR_0(0x3fff1, 0x12);
    80b8:	00800484 	movi	r2,18
    80bc:	00002206 	br	8148 <main+0xec>
			}
		}else if(escolha == 1){
    80c0:	9500041e 	bne	r18,r20,80d4 <main+0x78>
			if(IORD(CHECK_PRINT_BASE,0) == 0){ //The screen doesn't been drawn.
    80c4:	88800037 	ldwio	r2,0(r17)
    80c8:	103ff51e 	bne	r2,zero,80a0 <main+0x44>
				ALT_CI_VIDEO_PROCESSOR_0(0x3fff1, 0x80);
    80cc:	00802004 	movi	r2,128
    80d0:	00001d06 	br	8148 <main+0xec>
			}
		}else if(escolha == 2){
    80d4:	00800084 	movi	r2,2
    80d8:	9080041e 	bne	r18,r2,80ec <main+0x90>
			if(IORD(CHECK_PRINT_BASE,0) == 0){ //The screen doesn't been drawn.
    80dc:	88800037 	ldwio	r2,0(r17)
    80e0:	103fef1e 	bne	r2,zero,80a0 <main+0x44>
				ALT_CI_VIDEO_PROCESSOR_0(0x3fff1, 0x30);
    80e4:	00800c04 	movi	r2,48
    80e8:	00001706 	br	8148 <main+0xec>
			}
		}else if(escolha == 3){
    80ec:	008000c4 	movi	r2,3
    80f0:	9080041e 	bne	r18,r2,8104 <main+0xa8>
			if(IORD(CHECK_PRINT_BASE,0) == 0){ //The screen doesn't been drawn.
    80f4:	88800037 	ldwio	r2,0(r17)
    80f8:	103fe91e 	bne	r2,zero,80a0 <main+0x44>
				ALT_CI_VIDEO_PROCESSOR_0(0x3fff1, 0x45);
    80fc:	00801144 	movi	r2,69
    8100:	00001106 	br	8148 <main+0xec>
			}
		}else if(escolha == 4){
    8104:	00800104 	movi	r2,4
    8108:	9080041e 	bne	r18,r2,811c <main+0xc0>
			if(IORD(CHECK_PRINT_BASE,0) == 0){ //The screen doesn't been drawn.
    810c:	88800037 	ldwio	r2,0(r17)
    8110:	103fe31e 	bne	r2,zero,80a0 <main+0x44>
				ALT_CI_VIDEO_PROCESSOR_0(0x3fff1, 0x00);
    8114:	8005c032 	custom	0,r2,r16,zero
    8118:	003fe106 	br	80a0 <main+0x44>
			}
		}else if(escolha == 5){
    811c:	00800144 	movi	r2,5
    8120:	9080041e 	bne	r18,r2,8134 <main+0xd8>
			if(IORD(CHECK_PRINT_BASE,0) == 0){ //The screen doesn't been drawn.
    8124:	88800037 	ldwio	r2,0(r17)
    8128:	103fdd1e 	bne	r2,zero,80a0 <main+0x44>
				ALT_CI_VIDEO_PROCESSOR_0(0x3fff1, 0x10);
    812c:	00800404 	movi	r2,16
    8130:	00000506 	br	8148 <main+0xec>
			}
		}else if(escolha == 6){
    8134:	00800184 	movi	r2,6
    8138:	90bfd91e 	bne	r18,r2,80a0 <main+0x44>
			if(IORD(CHECK_PRINT_BASE,0) == 0){ //The screen doesn't been drawn.
    813c:	88800037 	ldwio	r2,0(r17)
    8140:	103fd71e 	bne	r2,zero,80a0 <main+0x44>
				ALT_CI_VIDEO_PROCESSOR_0(0x3fff1, 0x78);
    8144:	00801e04 	movi	r2,120
    8148:	8085c032 	custom	0,r2,r16,r2
    814c:	003fd406 	br	80a0 <main+0x44>

00008150 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    8150:	deffff04 	addi	sp,sp,-4
    8154:	01000074 	movhi	r4,1
    8158:	01400074 	movhi	r5,1
    815c:	dfc00015 	stw	ra,0(sp)
    8160:	21216404 	addi	r4,r4,-31344
    8164:	29616504 	addi	r5,r5,-31340

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    8168:	2140061e 	bne	r4,r5,8184 <alt_load+0x34>
    816c:	01000074 	movhi	r4,1
    8170:	01400074 	movhi	r5,1
    8174:	21200804 	addi	r4,r4,-32736
    8178:	29600804 	addi	r5,r5,-32736
    817c:	2140121e 	bne	r4,r5,81c8 <alt_load+0x78>
    8180:	00000b06 	br	81b0 <alt_load+0x60>
    8184:	00c00074 	movhi	r3,1
    8188:	18e16504 	addi	r3,r3,-31340
    818c:	1907c83a 	sub	r3,r3,r4
    8190:	0005883a 	mov	r2,zero
  {
    while( to != end )
    8194:	10fff526 	beq	r2,r3,816c <alt_load+0x1c>
    {
      *to++ = *from++;
    8198:	114f883a 	add	r7,r2,r5
    819c:	39c00017 	ldw	r7,0(r7)
    81a0:	110d883a 	add	r6,r2,r4
    81a4:	10800104 	addi	r2,r2,4
    81a8:	31c00015 	stw	r7,0(r6)
    81ac:	003ff906 	br	8194 <alt_load+0x44>
    81b0:	01000074 	movhi	r4,1
    81b4:	01400074 	movhi	r5,1
    81b8:	21216004 	addi	r4,r4,-31360
    81bc:	29616004 	addi	r5,r5,-31360

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    81c0:	2140101e 	bne	r4,r5,8204 <alt_load+0xb4>
    81c4:	00000b06 	br	81f4 <alt_load+0xa4>
    81c8:	00c00074 	movhi	r3,1
    81cc:	18e00804 	addi	r3,r3,-32736
    81d0:	1907c83a 	sub	r3,r3,r4
    81d4:	0005883a 	mov	r2,zero
  {
    while( to != end )
    81d8:	10fff526 	beq	r2,r3,81b0 <alt_load+0x60>
    {
      *to++ = *from++;
    81dc:	114f883a 	add	r7,r2,r5
    81e0:	39c00017 	ldw	r7,0(r7)
    81e4:	110d883a 	add	r6,r2,r4
    81e8:	10800104 	addi	r2,r2,4
    81ec:	31c00015 	stw	r7,0(r6)
    81f0:	003ff906 	br	81d8 <alt_load+0x88>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    81f4:	00083780 	call	8378 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    81f8:	dfc00017 	ldw	ra,0(sp)
    81fc:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    8200:	000837c1 	jmpi	837c <alt_icache_flush_all>
    8204:	00c00074 	movhi	r3,1
    8208:	18e16404 	addi	r3,r3,-31344
    820c:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    8210:	0005883a 	mov	r2,zero
  {
    while( to != end )
    8214:	18bff726 	beq	r3,r2,81f4 <alt_load+0xa4>
    {
      *to++ = *from++;
    8218:	114f883a 	add	r7,r2,r5
    821c:	39c00017 	ldw	r7,0(r7)
    8220:	110d883a 	add	r6,r2,r4
    8224:	10800104 	addi	r2,r2,4
    8228:	31c00015 	stw	r7,0(r6)
    822c:	003ff906 	br	8214 <alt_load+0xc4>

00008230 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8230:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    8234:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8238:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    823c:	00082980 	call	8298 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    8240:	00082b80 	call	82b8 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    8244:	d1a00217 	ldw	r6,-32760(gp)
    8248:	d1600317 	ldw	r5,-32756(gp)
    824c:	d1200417 	ldw	r4,-32752(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    8250:	dfc00017 	ldw	ra,0(sp)
    8254:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    8258:	000805c1 	jmpi	805c <main>

0000825c <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    825c:	defffe04 	addi	sp,sp,-8
    8260:	dc000015 	stw	r16,0(sp)
    8264:	dfc00115 	stw	ra,4(sp)
    8268:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    826c:	00083880 	call	8388 <strlen>
    8270:	01000074 	movhi	r4,1
    8274:	000f883a 	mov	r7,zero
    8278:	100d883a 	mov	r6,r2
    827c:	800b883a 	mov	r5,r16
    8280:	21216404 	addi	r4,r4,-31344
#else
    return fputs(str, stdout);
#endif
#endif
}
    8284:	dfc00117 	ldw	ra,4(sp)
    8288:	dc000017 	ldw	r16,0(sp)
    828c:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    8290:	00082bc1 	jmpi	82bc <altera_avalon_jtag_uart_write>

00008294 <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
    8294:	00082f01 	jmpi	82f0 <alt_busy_sleep>

00008298 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    8298:	deffff04 	addi	sp,sp,-4
    829c:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    82a0:	00083800 	call	8380 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    82a4:	00800044 	movi	r2,1
    82a8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    82ac:	dfc00017 	ldw	ra,0(sp)
    82b0:	dec00104 	addi	sp,sp,4
    82b4:	f800283a 	ret

000082b8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    82b8:	f800283a 	ret

000082bc <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    82bc:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    82c0:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    82c4:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    82c8:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    82cc:	2980072e 	bgeu	r5,r6,82ec <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    82d0:	38c00037 	ldwio	r3,0(r7)
    82d4:	18ffffec 	andhi	r3,r3,65535
    82d8:	183ffc26 	beq	r3,zero,82cc <altera_avalon_jtag_uart_write+0x10>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    82dc:	28c00007 	ldb	r3,0(r5)
    82e0:	20c00035 	stwio	r3,0(r4)
    82e4:	29400044 	addi	r5,r5,1
    82e8:	003ff806 	br	82cc <altera_avalon_jtag_uart_write+0x10>

  return count;
}
    82ec:	f800283a 	ret

000082f0 <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    82f0:	014666b4 	movhi	r5,6554
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    82f4:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    82f8:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    82fc:	dc000015 	stw	r16,0(sp)
    8300:	dfc00115 	stw	ra,4(sp)
    8304:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    8308:	000849c0 	call	849c <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    830c:	10001026 	beq	r2,zero,8350 <alt_busy_sleep+0x60>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    8310:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    8314:	013999b4 	movhi	r4,58982
    8318:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    831c:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    8320:	211999c4 	addi	r4,r4,26215
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    8324:	297fffc4 	addi	r5,r5,-1
    8328:	283ffe1e 	bne	r5,zero,8324 <alt_busy_sleep+0x34>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    832c:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    8330:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    8334:	18bffb16 	blt	r3,r2,8324 <alt_busy_sleep+0x34>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    8338:	01400144 	movi	r5,5
    833c:	8009883a 	mov	r4,r16
    8340:	00085580 	call	8558 <__mulsi3>
    8344:	10bfffc4 	addi	r2,r2,-1
    8348:	103ffe1e 	bne	r2,zero,8344 <alt_busy_sleep+0x54>
    834c:	00000506 	br	8364 <alt_busy_sleep+0x74>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    8350:	01400144 	movi	r5,5
    8354:	8009883a 	mov	r4,r16
    8358:	00085580 	call	8558 <__mulsi3>
    835c:	10bfffc4 	addi	r2,r2,-1
    8360:	00bffe16 	blt	zero,r2,835c <alt_busy_sleep+0x6c>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
    8364:	0005883a 	mov	r2,zero
    8368:	dfc00117 	ldw	ra,4(sp)
    836c:	dc000017 	ldw	r16,0(sp)
    8370:	dec00204 	addi	sp,sp,8
    8374:	f800283a 	ret

00008378 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    8378:	f800283a 	ret

0000837c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    837c:	f800283a 	ret

00008380 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    8380:	000170fa 	wrctl	ienable,zero
    8384:	f800283a 	ret

00008388 <strlen>:
    8388:	2005883a 	mov	r2,r4
    838c:	10c00007 	ldb	r3,0(r2)
    8390:	18000226 	beq	r3,zero,839c <strlen+0x14>
    8394:	10800044 	addi	r2,r2,1
    8398:	003ffc06 	br	838c <strlen+0x4>
    839c:	1105c83a 	sub	r2,r2,r4
    83a0:	f800283a 	ret

000083a4 <__divsi3>:
    83a4:	20001b16 	blt	r4,zero,8414 <__divsi3+0x70>
    83a8:	000f883a 	mov	r7,zero
    83ac:	28001616 	blt	r5,zero,8408 <__divsi3+0x64>
    83b0:	200d883a 	mov	r6,r4
    83b4:	29001a2e 	bgeu	r5,r4,8420 <__divsi3+0x7c>
    83b8:	00800804 	movi	r2,32
    83bc:	00c00044 	movi	r3,1
    83c0:	00000106 	br	83c8 <__divsi3+0x24>
    83c4:	10000d26 	beq	r2,zero,83fc <__divsi3+0x58>
    83c8:	294b883a 	add	r5,r5,r5
    83cc:	10bfffc4 	addi	r2,r2,-1
    83d0:	18c7883a 	add	r3,r3,r3
    83d4:	293ffb36 	bltu	r5,r4,83c4 <__divsi3+0x20>
    83d8:	0005883a 	mov	r2,zero
    83dc:	18000726 	beq	r3,zero,83fc <__divsi3+0x58>
    83e0:	0005883a 	mov	r2,zero
    83e4:	31400236 	bltu	r6,r5,83f0 <__divsi3+0x4c>
    83e8:	314dc83a 	sub	r6,r6,r5
    83ec:	10c4b03a 	or	r2,r2,r3
    83f0:	1806d07a 	srli	r3,r3,1
    83f4:	280ad07a 	srli	r5,r5,1
    83f8:	183ffa1e 	bne	r3,zero,83e4 <__divsi3+0x40>
    83fc:	38000126 	beq	r7,zero,8404 <__divsi3+0x60>
    8400:	0085c83a 	sub	r2,zero,r2
    8404:	f800283a 	ret
    8408:	014bc83a 	sub	r5,zero,r5
    840c:	39c0005c 	xori	r7,r7,1
    8410:	003fe706 	br	83b0 <__divsi3+0xc>
    8414:	0109c83a 	sub	r4,zero,r4
    8418:	01c00044 	movi	r7,1
    841c:	003fe306 	br	83ac <__divsi3+0x8>
    8420:	00c00044 	movi	r3,1
    8424:	003fee06 	br	83e0 <__divsi3+0x3c>

00008428 <__modsi3>:
    8428:	20001716 	blt	r4,zero,8488 <__modsi3+0x60>
    842c:	000f883a 	mov	r7,zero
    8430:	2005883a 	mov	r2,r4
    8434:	28001216 	blt	r5,zero,8480 <__modsi3+0x58>
    8438:	2900162e 	bgeu	r5,r4,8494 <__modsi3+0x6c>
    843c:	01800804 	movi	r6,32
    8440:	00c00044 	movi	r3,1
    8444:	00000106 	br	844c <__modsi3+0x24>
    8448:	30000a26 	beq	r6,zero,8474 <__modsi3+0x4c>
    844c:	294b883a 	add	r5,r5,r5
    8450:	31bfffc4 	addi	r6,r6,-1
    8454:	18c7883a 	add	r3,r3,r3
    8458:	293ffb36 	bltu	r5,r4,8448 <__modsi3+0x20>
    845c:	18000526 	beq	r3,zero,8474 <__modsi3+0x4c>
    8460:	1806d07a 	srli	r3,r3,1
    8464:	11400136 	bltu	r2,r5,846c <__modsi3+0x44>
    8468:	1145c83a 	sub	r2,r2,r5
    846c:	280ad07a 	srli	r5,r5,1
    8470:	183ffb1e 	bne	r3,zero,8460 <__modsi3+0x38>
    8474:	38000126 	beq	r7,zero,847c <__modsi3+0x54>
    8478:	0085c83a 	sub	r2,zero,r2
    847c:	f800283a 	ret
    8480:	014bc83a 	sub	r5,zero,r5
    8484:	003fec06 	br	8438 <__modsi3+0x10>
    8488:	0109c83a 	sub	r4,zero,r4
    848c:	01c00044 	movi	r7,1
    8490:	003fe706 	br	8430 <__modsi3+0x8>
    8494:	00c00044 	movi	r3,1
    8498:	003ff106 	br	8460 <__modsi3+0x38>

0000849c <__udivsi3>:
    849c:	200d883a 	mov	r6,r4
    84a0:	2900152e 	bgeu	r5,r4,84f8 <__udivsi3+0x5c>
    84a4:	28001416 	blt	r5,zero,84f8 <__udivsi3+0x5c>
    84a8:	00800804 	movi	r2,32
    84ac:	00c00044 	movi	r3,1
    84b0:	00000206 	br	84bc <__udivsi3+0x20>
    84b4:	10000e26 	beq	r2,zero,84f0 <__udivsi3+0x54>
    84b8:	28000516 	blt	r5,zero,84d0 <__udivsi3+0x34>
    84bc:	294b883a 	add	r5,r5,r5
    84c0:	10bfffc4 	addi	r2,r2,-1
    84c4:	18c7883a 	add	r3,r3,r3
    84c8:	293ffa36 	bltu	r5,r4,84b4 <__udivsi3+0x18>
    84cc:	18000826 	beq	r3,zero,84f0 <__udivsi3+0x54>
    84d0:	0005883a 	mov	r2,zero
    84d4:	31400236 	bltu	r6,r5,84e0 <__udivsi3+0x44>
    84d8:	314dc83a 	sub	r6,r6,r5
    84dc:	10c4b03a 	or	r2,r2,r3
    84e0:	1806d07a 	srli	r3,r3,1
    84e4:	280ad07a 	srli	r5,r5,1
    84e8:	183ffa1e 	bne	r3,zero,84d4 <__udivsi3+0x38>
    84ec:	f800283a 	ret
    84f0:	0005883a 	mov	r2,zero
    84f4:	f800283a 	ret
    84f8:	00c00044 	movi	r3,1
    84fc:	003ff406 	br	84d0 <__udivsi3+0x34>

00008500 <__umodsi3>:
    8500:	2005883a 	mov	r2,r4
    8504:	2900122e 	bgeu	r5,r4,8550 <__umodsi3+0x50>
    8508:	28001116 	blt	r5,zero,8550 <__umodsi3+0x50>
    850c:	01800804 	movi	r6,32
    8510:	00c00044 	movi	r3,1
    8514:	00000206 	br	8520 <__umodsi3+0x20>
    8518:	30000c26 	beq	r6,zero,854c <__umodsi3+0x4c>
    851c:	28000516 	blt	r5,zero,8534 <__umodsi3+0x34>
    8520:	294b883a 	add	r5,r5,r5
    8524:	31bfffc4 	addi	r6,r6,-1
    8528:	18c7883a 	add	r3,r3,r3
    852c:	293ffa36 	bltu	r5,r4,8518 <__umodsi3+0x18>
    8530:	18000626 	beq	r3,zero,854c <__umodsi3+0x4c>
    8534:	1806d07a 	srli	r3,r3,1
    8538:	11400136 	bltu	r2,r5,8540 <__umodsi3+0x40>
    853c:	1145c83a 	sub	r2,r2,r5
    8540:	280ad07a 	srli	r5,r5,1
    8544:	183ffb1e 	bne	r3,zero,8534 <__umodsi3+0x34>
    8548:	f800283a 	ret
    854c:	f800283a 	ret
    8550:	00c00044 	movi	r3,1
    8554:	003ff706 	br	8534 <__umodsi3+0x34>

00008558 <__mulsi3>:
    8558:	0005883a 	mov	r2,zero
    855c:	20000726 	beq	r4,zero,857c <__mulsi3+0x24>
    8560:	20c0004c 	andi	r3,r4,1
    8564:	2008d07a 	srli	r4,r4,1
    8568:	18000126 	beq	r3,zero,8570 <__mulsi3+0x18>
    856c:	1145883a 	add	r2,r2,r5
    8570:	294b883a 	add	r5,r5,r5
    8574:	203ffa1e 	bne	r4,zero,8560 <__mulsi3+0x8>
    8578:	f800283a 	ret
    857c:	f800283a 	ret
