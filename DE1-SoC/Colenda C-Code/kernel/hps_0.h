#ifndef _ALTERA_HPS_0_H_
#define _ALTERA_HPS_0_H_

/*
 * This file was automatically generated by the swinfo2header utility.
 * 
 * Created from SOPC Builder system 'soc_system' in
 * file '../soc_system.sopcinfo'.
 */

/*
 * This file contains macros for module 'hps_0' and devices
 * connected to the following masters:
 *   h2f_axi_master
 *   h2f_lw_axi_master
 * 
 * Do not include this header file and another header file created for a
 * different module or master group at the same time.
 * Doing so may result in duplicate macro names.
 * Instead, use the system header file which has macros with unique names.
 */

/*
 * Macros for device 'onchip_memory2_0', class 'altera_avalon_onchip_memory2'
 * The macros are prefixed with 'ONCHIP_MEMORY2_0_'.
 * The prefix is the slave descriptor.
 */
#define ONCHIP_MEMORY2_0_COMPONENT_TYPE altera_avalon_onchip_memory2
#define ONCHIP_MEMORY2_0_COMPONENT_NAME onchip_memory2_0
#define ONCHIP_MEMORY2_0_BASE 0x0
#define ONCHIP_MEMORY2_0_SPAN 65536
#define ONCHIP_MEMORY2_0_END 0xffff
#define ONCHIP_MEMORY2_0_ALLOW_IN_SYSTEM_MEMORY_CONTENT_EDITOR 0
#define ONCHIP_MEMORY2_0_ALLOW_MRAM_SIM_CONTENTS_ONLY_FILE 0
#define ONCHIP_MEMORY2_0_CONTENTS_INFO ""
#define ONCHIP_MEMORY2_0_DUAL_PORT 0
#define ONCHIP_MEMORY2_0_GUI_RAM_BLOCK_TYPE AUTO
#define ONCHIP_MEMORY2_0_INIT_CONTENTS_FILE soc_system_onchip_memory2_0
#define ONCHIP_MEMORY2_0_INIT_MEM_CONTENT 1
#define ONCHIP_MEMORY2_0_INSTANCE_ID NONE
#define ONCHIP_MEMORY2_0_NON_DEFAULT_INIT_FILE_ENABLED 0
#define ONCHIP_MEMORY2_0_RAM_BLOCK_TYPE AUTO
#define ONCHIP_MEMORY2_0_READ_DURING_WRITE_MODE DONT_CARE
#define ONCHIP_MEMORY2_0_SINGLE_CLOCK_OP 0
#define ONCHIP_MEMORY2_0_SIZE_MULTIPLE 1
#define ONCHIP_MEMORY2_0_SIZE_VALUE 65536
#define ONCHIP_MEMORY2_0_WRITABLE 1
#define ONCHIP_MEMORY2_0_MEMORY_INFO_DAT_SYM_INSTALL_DIR SIM_DIR
#define ONCHIP_MEMORY2_0_MEMORY_INFO_GENERATE_DAT_SYM 1
#define ONCHIP_MEMORY2_0_MEMORY_INFO_GENERATE_HEX 1
#define ONCHIP_MEMORY2_0_MEMORY_INFO_HAS_BYTE_LANE 0
#define ONCHIP_MEMORY2_0_MEMORY_INFO_HEX_INSTALL_DIR QPF_DIR
#define ONCHIP_MEMORY2_0_MEMORY_INFO_MEM_INIT_DATA_WIDTH 64
#define ONCHIP_MEMORY2_0_MEMORY_INFO_MEM_INIT_FILENAME soc_system_onchip_memory2_0

/*
 * Macros for device 'data_B', class 'altera_avalon_pio'
 * The macros are prefixed with 'DATA_B_'.
 * The prefix is the slave descriptor.
 */
#define DATA_B_COMPONENT_TYPE altera_avalon_pio
#define DATA_B_COMPONENT_NAME data_B
#define DATA_B_BASE 0x0
#define DATA_B_SPAN 16
#define DATA_B_END 0xf
#define DATA_B_BIT_CLEARING_EDGE_REGISTER 0
#define DATA_B_BIT_MODIFYING_OUTPUT_REGISTER 0
#define DATA_B_CAPTURE 0
#define DATA_B_DATA_WIDTH 32
#define DATA_B_DO_TEST_BENCH_WIRING 0
#define DATA_B_DRIVEN_SIM_VALUE 0
#define DATA_B_EDGE_TYPE NONE
#define DATA_B_FREQ 50000000
#define DATA_B_HAS_IN 0
#define DATA_B_HAS_OUT 1
#define DATA_B_HAS_TRI 0
#define DATA_B_IRQ_TYPE NONE
#define DATA_B_RESET_VALUE 0

/*
 * Macros for device 'data_A', class 'altera_avalon_pio'
 * The macros are prefixed with 'DATA_A_'.
 * The prefix is the slave descriptor.
 */
#define DATA_A_COMPONENT_TYPE altera_avalon_pio
#define DATA_A_COMPONENT_NAME data_A
#define DATA_A_BASE 0x10
#define DATA_A_SPAN 16
#define DATA_A_END 0x1f
#define DATA_A_BIT_CLEARING_EDGE_REGISTER 0
#define DATA_A_BIT_MODIFYING_OUTPUT_REGISTER 0
#define DATA_A_CAPTURE 0
#define DATA_A_DATA_WIDTH 32
#define DATA_A_DO_TEST_BENCH_WIRING 0
#define DATA_A_DRIVEN_SIM_VALUE 0
#define DATA_A_EDGE_TYPE NONE
#define DATA_A_FREQ 50000000
#define DATA_A_HAS_IN 0
#define DATA_A_HAS_OUT 1
#define DATA_A_HAS_TRI 0
#define DATA_A_IRQ_TYPE NONE
#define DATA_A_RESET_VALUE 0

/*
 * Macros for device 'reset_pulseCounter', class 'altera_avalon_pio'
 * The macros are prefixed with 'RESET_PULSECOUNTER_'.
 * The prefix is the slave descriptor.
 */
#define RESET_PULSECOUNTER_COMPONENT_TYPE altera_avalon_pio
#define RESET_PULSECOUNTER_COMPONENT_NAME reset_pulseCounter
#define RESET_PULSECOUNTER_BASE 0x20
#define RESET_PULSECOUNTER_SPAN 16
#define RESET_PULSECOUNTER_END 0x2f
#define RESET_PULSECOUNTER_BIT_CLEARING_EDGE_REGISTER 0
#define RESET_PULSECOUNTER_BIT_MODIFYING_OUTPUT_REGISTER 0
#define RESET_PULSECOUNTER_CAPTURE 0
#define RESET_PULSECOUNTER_DATA_WIDTH 1
#define RESET_PULSECOUNTER_DO_TEST_BENCH_WIRING 0
#define RESET_PULSECOUNTER_DRIVEN_SIM_VALUE 0
#define RESET_PULSECOUNTER_EDGE_TYPE NONE
#define RESET_PULSECOUNTER_FREQ 50000000
#define RESET_PULSECOUNTER_HAS_IN 0
#define RESET_PULSECOUNTER_HAS_OUT 1
#define RESET_PULSECOUNTER_HAS_TRI 0
#define RESET_PULSECOUNTER_IRQ_TYPE NONE
#define RESET_PULSECOUNTER_RESET_VALUE 0

/*
 * Macros for device 'screen', class 'altera_avalon_pio'
 * The macros are prefixed with 'SCREEN_'.
 * The prefix is the slave descriptor.
 */
#define SCREEN_COMPONENT_TYPE altera_avalon_pio
#define SCREEN_COMPONENT_NAME screen
#define SCREEN_BASE 0x30
#define SCREEN_SPAN 16
#define SCREEN_END 0x3f
#define SCREEN_BIT_CLEARING_EDGE_REGISTER 0
#define SCREEN_BIT_MODIFYING_OUTPUT_REGISTER 0
#define SCREEN_CAPTURE 0
#define SCREEN_DATA_WIDTH 1
#define SCREEN_DO_TEST_BENCH_WIRING 0
#define SCREEN_DRIVEN_SIM_VALUE 0
#define SCREEN_EDGE_TYPE NONE
#define SCREEN_FREQ 50000000
#define SCREEN_HAS_IN 1
#define SCREEN_HAS_OUT 0
#define SCREEN_HAS_TRI 0
#define SCREEN_IRQ_TYPE NONE
#define SCREEN_RESET_VALUE 16383

/*
 * Macros for device 'wrfull', class 'altera_avalon_pio'
 * The macros are prefixed with 'WRFULL_'.
 * The prefix is the slave descriptor.
 */
#define WRFULL_COMPONENT_TYPE altera_avalon_pio
#define WRFULL_COMPONENT_NAME wrfull
#define WRFULL_BASE 0x40
#define WRFULL_SPAN 16
#define WRFULL_END 0x4f
#define WRFULL_BIT_CLEARING_EDGE_REGISTER 0
#define WRFULL_BIT_MODIFYING_OUTPUT_REGISTER 0
#define WRFULL_CAPTURE 0
#define WRFULL_DATA_WIDTH 1
#define WRFULL_DO_TEST_BENCH_WIRING 0
#define WRFULL_DRIVEN_SIM_VALUE 0
#define WRFULL_EDGE_TYPE NONE
#define WRFULL_FREQ 50000000
#define WRFULL_HAS_IN 1
#define WRFULL_HAS_OUT 0
#define WRFULL_HAS_TRI 0
#define WRFULL_IRQ_TYPE NONE
#define WRFULL_RESET_VALUE 16383

/*
 * Macros for device 'wrreg', class 'altera_avalon_pio'
 * The macros are prefixed with 'WRREG_'.
 * The prefix is the slave descriptor.
 */
#define WRREG_COMPONENT_TYPE altera_avalon_pio
#define WRREG_COMPONENT_NAME wrreg
#define WRREG_BASE 0x50
#define WRREG_SPAN 16
#define WRREG_END 0x5f
#define WRREG_BIT_CLEARING_EDGE_REGISTER 0
#define WRREG_BIT_MODIFYING_OUTPUT_REGISTER 0
#define WRREG_CAPTURE 0
#define WRREG_DATA_WIDTH 1
#define WRREG_DO_TEST_BENCH_WIRING 0
#define WRREG_DRIVEN_SIM_VALUE 0
#define WRREG_EDGE_TYPE NONE
#define WRREG_FREQ 50000000
#define WRREG_HAS_IN 0
#define WRREG_HAS_OUT 1
#define WRREG_HAS_TRI 0
#define WRREG_IRQ_TYPE NONE
#define WRREG_RESET_VALUE 0

/*
 * Macros for device 'sysid_qsys', class 'altera_avalon_sysid_qsys'
 * The macros are prefixed with 'SYSID_QSYS_'.
 * The prefix is the slave descriptor.
 */
#define SYSID_QSYS_COMPONENT_TYPE altera_avalon_sysid_qsys
#define SYSID_QSYS_COMPONENT_NAME sysid_qsys
#define SYSID_QSYS_BASE 0x10000
#define SYSID_QSYS_SPAN 8
#define SYSID_QSYS_END 0x10007
#define SYSID_QSYS_ID 2899645186
#define SYSID_QSYS_TIMESTAMP 1708638467

/*
 * Macros for device 'jtag_uart', class 'altera_avalon_jtag_uart'
 * The macros are prefixed with 'JTAG_UART_'.
 * The prefix is the slave descriptor.
 */
#define JTAG_UART_COMPONENT_TYPE altera_avalon_jtag_uart
#define JTAG_UART_COMPONENT_NAME jtag_uart
#define JTAG_UART_BASE 0x20000
#define JTAG_UART_SPAN 8
#define JTAG_UART_END 0x20007
#define JTAG_UART_IRQ 2
#define JTAG_UART_READ_DEPTH 64
#define JTAG_UART_READ_THRESHOLD 8
#define JTAG_UART_WRITE_DEPTH 64
#define JTAG_UART_WRITE_THRESHOLD 8


#endif /* _ALTERA_HPS_0_H_ */
